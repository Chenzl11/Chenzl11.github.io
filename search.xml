<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jQuery</title>
      <link href="2020/11/12/jquery/"/>
      <url>2020/11/12/jquery/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*什么是jQuery: jQuery是JavaScript的一个库,里面是由JS代码封装好的各种函数,可以利用这些函数实现对页面中元素的操作,如操作css样式,也可以操作从后台获取数据等等.jQuery的宗旨: 写的更少,做的更多*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 引入jQuery:&lt;script src="jQuery地址">&lt;/script>2. jQuery入口函数:1) 方式1: $(function(){    ...});2) 方式2: $(document).ready(function(){    ...});3. load事件: JS原生事件 ready事件: jQuery中的事件区别: 1) ready事件的触发时间要早于load事件,ready事件实在DOM树渲染完毕后触发,而load事件是在页面中的节点加载完毕后触发,如页面中的图片都加载完毕了才会触发该事件2) 页面中可以有多个ready事件同时存在,它们不会产生覆盖现象,而load只能有一个,后面加的会覆盖掉前面的.4. $符号的作用:它指向了一个函数,就是jQuery的构造函数,它可以用来选取页面中的元素,也可以将DOM对象转换为jQuery对象,还可以用来写入口函数.注意: jQuery中除了用$代表jQuery的构造函数,还可以用jQuery关键字来代表.即 $ === jQuery.如果项目中有其他的框架里面也有$符号,那么为了避免冲突,我们这时就不要使用$符号,而改用jQuery关键字.5. DOM对象: 用原生JS的方式获取到的页面元素被称为DOM对象jQuery对象: 用jQuery的方式获取到的页面元素被称为jQuery对象 jQuery对象和DOM对象的相互转化:jQuery对象转化为DOM对象: jQuery对象[下标]DOM对象转化为jQuery对象: $(DOM对象)6. 选择器 ===> CSS选择器注意: 绑定事件中this的使用,需要加上$(this) 转化为jQuery对象才可以使用jQuery的方法特殊::first/:last/:eq(num)/:even/:odd/:lt(num)/:gt(num)/  ==>是按照下标开始找 从0开始:first-child/:last-child/:nth-child(num)/:nth-last-child(num)/:first-of-type/:last-of-type/:nth-of-type(num)/:nth-last-of-type(num)/   ==>是按照位置开始找 从1开始表单过滤选择器:1) :input 过滤所有的输入框2) :text  过滤所有的文本框3) :password  过滤所有的密码框4) :radio  过滤所有的单选框5) :checkbox  过滤所有的复选框6) :submit  过滤所有的提交按钮7) :reset  过滤所有的重置按钮8) :button  过滤所有的点击按钮9) :checked 获取选中的元素10) :selected  获取选中的元素*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jQuery常用方法"><a href="#jQuery常用方法" class="headerlink" title="jQuery常用方法"></a>jQuery常用方法</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. html方法和text方法text方法    作用: 获取或设置jQuery对象中的内容    格式: jQuery对象.text();/jQuery对象.text(内容);html方法    作用: 获取或设置jQuery对象中的内容    格式: jQuery对象.html();/jQuery对象.html(内容);text方法和html方法的区别:1) text方法在获取jQuery对象下面内容的时候,返回的是所有文本内容拼接的字符串2) html方法在获取jQuery对象下面内容的时候,返回的是文本内容和后代节点3) 在设置内容时,text方法不解析标签,html方法会解析标签4) 如果jQuery对象由多个元素构成,那么text方法在执行时会隐式迭代,而html方法只取jQuery对象中第一个元素的内容2. val方法作用: 获取或设置表单元素的值格式: 表单元素.val();/表单元素.val(值);3. attr方法和prop方法: 都可以设置jQuery对象的属性,都可以一次性添加多个属性区别: attr方法可以设置自定义属性而prop方法不可以设置自定义属性设置selected/checked属性时一般使用prop方法将属性的值设置为true/false一次性添加多个属性,格式:jQuery对象.attr/prop({属性1;:属性值,属性2:属性值, ...});4. removeAttr方法和removeProp方法: 都可以删除属性,注意removeProp方法是将属性值设置为undefined,一次性删除多个属性用空格隔开5. css方法: 获取或设置css属性,可以一次性设置多个属性 jQuery对象.css({属性1: 属性值, 属性2: 属性值, ...})6. addClass方法、toggleClass方法、removeClass方法addClass方法: 为jQuery对象添加class属性,可添加多个class jQuery对象.addClass('class1 class2');toggleClass方法: 为jQuery对象添加class属性,注意: 如果有class则删除,如果没有则添加removeClass方法: 删除jQuery对象的class jQuery对象.removeClass('class1');7. 获取或设置jQuery对象的尺寸1) width()/height(): 不受padding/margin/border/scroll影响,设置时可以加px也可以不加2) innerWidth()/innerHeight(): 受padding影响,设置时可以加px也可以不加3) outerWidth()/outerHeight(): 受padding/border影响,设置时可以加px也可以不加8. 滚动条操作1) scrollTop(): 获取或设置Y轴滚动条的位置2) scrollLeft(): 获取或设置X轴滚动条的位置9. 创建jQuery对象格式1: $('&lt;div>')格式2: $('&lt;div>内容&lt;/div>')格式3: $('&lt;div id="box" class="box1">内容&lt;/div>')10. 内部追加jQuery对象的方法 操作已有的节点时都具有移动节点的功能1) append方法和appendTo方法作用: 将jQuery对象以尾部追加的方法添加到容器内部格式: 容器.append(被添加的jQuery对象或标签形成的字符串)  被添加对象.appendTo(代表容器的jQuery对象或选择器)2) prepend方法和prependTo方法作用: 将jQuery对象以开头追加的方式添加到容器内部格式: 容器.prepend(被添加的jQuery对象或标签形成的字符串)  被添加对象.prependTo(代表容器的jQuery对象或选择器)11. 外部追加jQuery对象的方法 操作已有的节点时都具有移动节点的功能1) after方法和insertAfter方法作用: 在目标元素的后面插入新的jQuery对象格式: 目标元素.after(要插入的新的jQuery对象)  要插入的新的jQuery对象.insertAfter(目标元素)2) before方法和insertBefore方法作用: 在目标元素的前面插入新的jQuery对象格式: 目标元素.before(要插入的新的jQuery对象)  要插入的新的jQuery对象.insertBefore(目标元素)12. 删除节点的方法1) empty方法作用: 清空某个容器下面的所有内容格式: 容器.empty();2) remove方法作用: 删除页面中的某个jQuery对象格式: 要被删除的jQuery对象.remove('选择器');注意: 如果被删除元素的身上有事件,那么事件会被删除eg: $('#box').remove(); //表示删除id为box的元素$('li').remove('#box'); //表示删除带有id=box的li标签元素13. 克隆节点clone方法作用: 克隆页面中的元素格式: 要被克隆的元素.clone(true/false) false为默认值,表示不克隆事件 true表示克隆事件返回值: 被克隆出来的节点14. 获取祖先元素的方法1) parent方法作用: 返回父节点格式: 当前节点.parent();2) parents方法作用: 返回所有的祖先节点格式: 当前节点.parents();3) parentsUntil方法作用: 获取到某个祖先节点之前的祖先节点,不包含该节点格式: 当前节点.parentsUntil('祖先节点2'); //返回值中不包含祖先节点215. 获取后代节点的方法1) children方法作用: 返回被选元素的所有直接子元素格式: 当前元素.children();2) find方法作用: 返回被选元素的后代元素格式: 当前元素.find();eg: $('#box').find('span'); //返回id为box的元素内部的所有span元素16. 获取兄弟元素的方法 不包含本身1) siblings方法: 获取所有的兄弟元素2) next方法: 获取后一个兄弟元素3) nextAll方法: 获取后面所有的兄弟元素4) nextUntil方法: 获取到后面第几个元素位置的兄弟元素 eg: $('#li5').nextUntil('#li9');//li标签从6-85) prev方法: 获取前一个兄弟元素6) prevAll方法: 获取前面的所有兄弟元素7) prevUntil方法: 获取到前面的第几个元素位置的兄弟元素 eg: $('#li5').prev('#li2');//li标签从3-417. jQuery对象的过滤 返回的都是jQuery对象1) first方法: 返回被选中元素的首个元素2) last方法: 返回被选中元素的最后一个元素3) eq方法: 返回被选中元素中带有指定索引的元素4) filter方法: 过滤出指定选择器的jQuery对象,选择器之间用逗号隔开18. 其他1) addBack方法: 将目标元素添加到jQuery对象集合中 eg: $('#box').nextAll().addBack();2) end方法: 返回链式结构被破坏之前的那个jQuery对象 eg: $('#box').next().end();*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. jQuery事件的添加方式1) 方式1 格式: jQuery对象.事件名称(function(){    //事件被触发时要执行的操作});注意: 如果同一元素被添加多个相同的事件,事件不会覆盖2) 方式2 格式: //绑定一个事件jQuery对象.bind('事件名称', function(){    //事件被触发时要执行的操作});//绑定多个事件,对应的操作相同jQuery对象.bind('事件名称1, 事件名称2, ...', function(){    //事件被触发时要执行的操作});//绑定多个事件,对应操作不相同jQuery对象.bind({    事件名称1: function(){},    事件名称2: function(){},    ...});//在为元素绑定事件的时候,给它传递数据jQuery对象.bind('事件名称', {属性1: 属性值, 属性2: 属性值, ...}, function(e){    //使用事件对象的data属性来获取传递进来的数据    var data = e.data;});3) 方式3 格式: 祖先元素.delegate(后代元素, 事件名称, 数据, function(){    //事件被触发时要执行的操作});注意: 该方法在为元素绑定事件时只能用事件委托的形式来绑定4) 方式4 格式: jQuery对象.on('事件名称', function(){});jQuery对象.on('事件名称1 事件名称2 ...', function(){});jQuery对象.on({    事件名称1: function(){},    事件名称2: function(){},    ...});祖先元素的jQuery对象.on('事件名称', '后代元素', 数据, function(){});特殊: 1) hover方法作用: 为元素添加移入和移出事件格式: jQuery对象.hover(function(){},function(){}); //前一个方法表示移入事件,后一个方法表示移出事件2) one方法作用: 给元素添加一次性事件格式: jQuery对象.one('事件名称', function(){});2. jQuery事件的删除方式1) unbind方法作用: 删除jQuery对象身上的事件(一般是删除通过bind方法绑定的事件)格式1: jQuery对象.unbind();//表示删除所有事件格式2: jQuery对象.unbind('事件名称');//表示删除指定事件2) undelegate方法作用: 删除通过delegate方法绑定的事件格式: jQuery对象.undelegate();3) off方法作用: 删除事件(任何方式添加的事件都可以删除)格式1: jQuery对象.off();//表示删除所有事件格式2: jQuery对象.off('事件名称');//表示删除指定事件*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jQuery中的内置动画"><a href="#jQuery中的内置动画" class="headerlink" title="jQuery中的内置动画"></a>jQuery中的内置动画</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 显示与隐藏1) hide方法: 隐藏动画 格式: jQuery对象.hide(动画执行所需时间, function(){});//动画执行完毕触发的方法 1) show方法: 显示动画 格式: jQuery对象.show(动画执行所需时间, function(){});//动画执行完毕触发的方法 1) toggle方法: 隐藏/显示动画 格式: jQuery对象.toggle(动画执行所需时间, function(){});//动画执行完毕触发的方法 2. 滑动(向上/向下)1) slideDown方法: 向下滑动 格式: jQuery对象.slideDown(动画执行所需时间, function(){});//动画执行完毕触发的方法 2) slideUp方法: 向上滑动 格式: jQuery对象.slideUp(动画执行所需时间, function(){});//动画执行完毕触发的方法 3) slideToggle方法: 向上/下滑动 格式: jQuery对象.slideToggle(动画执行所需时间, function(){});//动画执行完毕触发的方法 3. 淡入与淡出1) fadeIn方法: 淡入 格式: jQuery对象.fadeIn(动画执行所需时间, function(){});//动画执行完毕触发的方法2) fadeOut方法: 淡出 格式: jQuery对象.fadeOut(动画执行所需时间, function(){});//动画执行完毕触发的方法3) fadeToggle方法: 淡入/淡出 格式: jQuery对象.fadeToggle(动画执行所需时间, function(){});//动画执行完毕触发的方法4) fadeTo方法: 将元素的透明度逐渐改变到指定的值,注意即使设置元素的透明度为0,元素也是占位的,因为元素没有被设置display:none;格式: jQuery对象.fateTo(动画执行所需时间, 设置透明度);*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jQuery中的自定义动画"><a href="#jQuery中的自定义动画" class="headerlink" title="jQuery中的自定义动画"></a>jQuery中的自定义动画</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. animate方法作用: 用来创建自定义动画的方法格式: jQuery对象.animate(参数1, 参数2, 参数3, 参数4);参数说明:    参数1: 该参数通常是一个对象,里面以键值对的形式封装了要达到的CSS样式 注意: animate的修改样式时只对属性值中包含数值的样式敏感,属性值可以不带单位    参数2: 动画执行所需的时间,单位为毫秒,该参数也可以是字符串,如fast(200ms)、normal(400ms)、slow(600ms) 注意: 如果是任意字符串,即表示的是normal    参数3: 动画在执行时的状态(匀速、慢-快-慢) 只支持两个值 linear、swing(默认) 注意:设置该参数时要加引号    参数4: 回调函数,动画执行完毕后执行该回调函数2. stop方法作用: 停止动画格式: jQuery对象.stop(参数1, 参数2);参数说明:     参数1: 值为布尔值,默认值为false(结束当前动画,执行下一次动画),如果为true(结束当前动画,清空动画队列,即删除剩余动画)     参数2: 值为布尔值,默认值为false(当前动画没有完成,开始执行下一次动画),如果为true,表示立即完成当前动画,并完成队列(即完成其他动画)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="each方法"><a href="#each方法" class="headerlink" title="each方法"></a>each方法</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*each方法作用: 可以利用each方法对jQuery对象集合中的每个元素做单独的处理格式: jQuery对象.each(function(index, ele){    //在函数内部可以对jQuery对象集合中的每个对象做单独的处理});回调函数参数说明:    index: jQuery对象集合中DOM对象的下标    ele: 集合中的DOM对象*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="each方法-1"><a href="#each方法-1" class="headerlink" title="$.each方法"></a>$.each方法</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*$.each方法作用: 该方法是$的一个静态方法,可以用该方法去处理数组或对象格式: $.each(数组/对象, function(index, val){});*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="2020/11/11/javascript/"/>
      <url>2020/11/11/javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="变量-let"><a href="#变量-let" class="headerlink" title="变量 let"></a>变量 let</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*let没有变量提升 一般用于块级作用域*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常量 const</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*常量名一般都是大写 定义常量时直接给常量初始化*/</span>eg<span class="token punctuation">:</span><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除数组元素"><a href="#删除数组元素" class="headerlink" title="删除数组元素"></a>删除数组元素</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*delete arr[1];注意:删除数组元素后,位置保留,当前数组元素的值为undefined*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*for of循环:for(var ele of arr){    console.log(ele);}注意:ele是数组的元素,不是下标forEach循环:arr.forEach(function(ele, index){    console.log(ele + '===' + index);});注意:形参ele为数组元素,index为数组下标*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组对象的方法"><a href="#数组对象的方法" class="headerlink" title="数组对象的方法"></a>数组对象的方法</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. find方法1) 作用: find()方法返回通过测试(函数内判断)的数组的第一个元素的值2) 格式: arr.find(function(val, index, arr){return val > 50})2. findIndex方法1) 作用: findIndex()方法返回通过测试(函数内判断)的数组的第一个元素的下标2) 格式: arr.findIndex(function(val, index, arr){return val > 50})3. map方法1) 作用: map()方法返回一个新数组,数组中的元素为原始数组元素调用函数处理后的值,不会对空数组进行检测2) 格式: arr.map(function(val, index, arr){})4. some方法1) 作用: some()方法用于检测数组中的元素是否满足指定条件(函数提供).有满足条件的返回true,否则返回false2) 格式: arr.some(function(val, index, arr){return val > 3})5. every方法1) 作用: every()方法用于检测数组中所有元素是否都符合指定条件2) 格式: arr.every(function(val, index, arr){return val > 3})6. includes方法1) 作用: includes()方法用来判断一个数组是否包含一个指定的值,如果是返回true,否则返回false2) 格式: arr.includes(seachElement, fromIndex)7. filter方法1) 作用: 从数组中过滤出符合条件的数组元素,返回值为由这些元素形成的新的数组2) 格式: arr.filter(function(val, index, arr){return 条件})*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 利用Object.keys方法获取对象的所有属性格式: Object.keys(obj) 返回一个数组2. 利用Object.values方法获取对象的所有属性值格式: Object.values(obj)返回一个数组3. 利用Object.entries方法获取对象中所有的属性名和属性值格式: Object.entries(obj)返回一个二维数组*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Math对象的属性和方法"><a href="#Math对象的属性和方法" class="headerlink" title="Math对象的属性和方法"></a>Math对象的属性和方法</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. PI属性作用: 获取圆周率格式: Math.PI2. ceil方法作用: 对数据进行向上取整,取最小整数格式: Math.ceil(num)3. floor方法作用: 对数据进行向下取整,取最大整数格式: Math.floor(num)4. round方法作用: 对数据进行四舍五入,取整数,对小数点后一位做四舍五入格式: Math.round(num)5. pow方法格式: Math.pow(x,y)作用: 求x的y次方6. max方法作用: 求数据的最大值格式: Math.max(num1, num2, num3, ...)不可以直接传数组 可以通过...arr方法传参7. min方法作用: 求数据的最小值格式: Math.min(num1, num2, num3, ...)不可以直接传数组 可以通过...arr方法传参8. abs方法作用: 求数据的绝对值格式: Math.abs(num)9. sqrt方法作用: 求数据的算数平方根格式: Math.sqrt(num)10. random方法作用: 返回0-1的随机小数,包含0,但是不包含1格式: Math.random()利用random方法生成n-m的随机整数,包含n和m公式: parseInt(Math.random() * (最大值 - 最小值 + 1) + 最小值)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="日期和时间对象"><a href="#日期和时间对象" class="headerlink" title="日期和时间对象"></a>日期和时间对象</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 创建日期和时间对象1) var date1 = new Date();//表示创建系统当前的日期时间对象2) var date2 = new Date('2020-1-1 12:30:33');//将指定的日期时间字符串转换为日期3) var date3 = new Date(1000);//返回的是距离1970年1月1日0时0分0秒的时间点 (注意: 北京位于东八区 比标准时间多8小时)2. 日期时间对象的方法1) date.getFullYear() //获取年份返回的是number类型2) date.getYear() //返回距离1900年的年份3) date.getMonth() //返回月份 注意: 返回值为0-11 0表示1月 11表示12月4) date.getDate() //返回天5) date.getDay() //返回星期 注意: 返回值为0-6 0表示星期日 1表示星期16) date.getHours() //返回小时7) date.getMinutes() //返回分钟8) date.getSeconds() //返回秒9) date.getTime() //距离1970年1月1日0时0分0秒的毫秒值10) date.toLocalString() //包含时间和日期11) date.toLocalDateString() //只包含日期12) date.toLocalTimeString() //只包含时间*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 创建字符串对象1) 方式一: 利用构造方法Stringvar str = new String('hello');2) 方式二: 利用字面量形式var str = 'hello';// 基本数据类型的字符串之所以能调用字符串对象的属性和方法,是因为在调用这些属性和方法的那一刻,后台会自动将基本类型的字符串包装成字符串对象,然后调用字符串的属性和方法,在调用完毕后,又将这个字符串对象转换为基本的数据类型.2. 字符串对象的方法1) startsWith方法作用: 判断字符串是否以某个字符开头.如果是则返回true 否则返回false格式: str.startsWith('字符')2) endsWith方法作用: 判断字符串是否以某个字符结尾.如果是则返回true 否则返回false格式: str.endsWith('字符')3) repeat方法作用: 返回一个新字符串,表示将原字符串重复n次格式: str.repeat(3)4) padStart方法作用: 将字符串扩展到指定的长度,如果长度不够,那么在字符串的开头以指定字符补位格式: str.padStart(长度, '指定字符')注意: 如果指定的长度小于字符串现有的长度,那么不需要补位,直接返回字符串本身5) padEnd方法作用: 将字符串扩展到指定的长度,如果长度不够,那么在字符串的末尾以指定字符补位格式: str.padEnd(长度, '指定字符')注意: 如果指定的长度小于字符串现有的长度,那么不需要补位,直接返回字符串本身3. 字符串的编码方法1) btoa方法 编码作用: 按照Base64的编码方式,对字符串进行编码格式: btoa(str)atob方法 解码作用: 按照Base64编码方式得到的字符串解码回原有的字符串格式: atob(str)2) encodeURIComponent方法 编码作用: 将非ASCII码转换为Base64编码格式: encodeURIComponent(str)decodeURIComponent方法 解码作用: 将转码后的内容转为非ASCII码内容格式: decodeURIComponent(str)*/</span>eg<span class="token punctuation">:</span> 字符串解析 将不能直接被使用的数据通过解析变成可以被直接使用的数据 <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">'?age=10&amp;score=90&amp;height=175'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//window.location.search获取的字符串的格式</span><span class="token keyword">var</span> infoArr <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用来存储参数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>infoArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> tempArr <span class="token operator">=</span> infoArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tempArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       obj<span class="token punctuation">[</span>tempArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> tempArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="try…catch-异常捕获机制"><a href="#try…catch-异常捕获机制" class="headerlink" title="try…catch 异常捕获机制"></a>try…catch 异常捕获机制</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*如果没有try catch,那么当程序中有错误时,程序就会停到错误的位置,不在继续往下执行,即使后面的代码是正确的也不执行,那么这样的用户体验不好,所以我们可以使用try catch异常捕获机制,将可能有问题的代码放在try中,然后将解决方式放在catch中.这样就算程序发现错误,程序也会继续执行后面的代码.1. 格式try{    可能会有问题的代码}catch(error){    错误的处理方式}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*当局部变量与全局变量名相同时,要使用全局变量可以用window.变量名或this.变量名调用arguments对象: 该对象是函数内部的一个对象,即该对象只能在函数内部使用,不能在外部使用.它的作用是用来管理函数被调用时传递过来的实参.它不是一个数组,它是一个伪数组.在管理实参时也是用下标的方式对实参进行编号,即可以使用arguments[下标]的形式操作实参.形参和arguments的关系: 形参和arguments都可以管理实参,并且它们管理的是同一份数据.在操作实参时可以用形参,也可以用arguments,为了方便通常使用形参.如果实参的个数是确定的,那么我们就定义形参,如果实参的个数是不确定的时候,就不定义形参.用arugments来操作实参arguments对象的两个属性 length calleelength属性: 获取实参的个数callee属性: 获取arguments对象所在的函数,即callee属性指向了arguments对象所在的函数.常与递归函数结合使用或与匿名自执行函数结合使用.1. 重载函数: 重载函数就是指两个函数的名称相同,但是它们的形参个数不同或形参的类型不同注意: JavaScript中没有重载函数,在JavaScript中如果函数名称相同那么后面的函数会覆盖前面的函数如果要在JavaScript中模拟重载函数,可以使用arguments对象来实现2. 递归函数: 指在一个函数内部调用了自己的函数 注意: 在使用递归函数时一定要确定递归函数的"出口",即在某个时刻能够让函数不再调用自己eg:function fun1(n){    if(n == 1){        return 1;    }else{        return arguments.callee(n-1) + n;    }}3. 匿名函数: 没有函数名称的函数,匿名函数可以和事件相结合,常用格式如下:HTML元素.on事件名称 = function(){...}4. 回调函数: 如果一个函数被当做一个函数的参数,那么这个被作为参数的函数就是回调函数 回调函数常用匿名函数5. 匿名自执行函数: 没有名称且不需要手动调用的函数格式:1) 无参无返回值的匿名自执行函数(function(){    函数体})();2) 有参无返回值的匿名自执行函数(function(形参1, 形参2, ...){    函数体})(实参1, 实参2, ...)3) 有参有返回值的匿名自执行函数var res = (function(形参1, 形参2, ...){    函数体    return data;})(实参1, 实参2, ...);注意: 匿名自执行函数通常是用来创建块级作用域*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="setInterval-clearInterval"><a href="#setInterval-clearInterval" class="headerlink" title="setInterval()/clearInterval()"></a>setInterval()/clearInterval()</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. setInterval()方法作用: 用来设置定时器,能够在一定的时间间隔下重复执行某个操作格式: window.setInterval(要重复执行的操作, 时间间隔);参数说明:     要重复执行的操作: 可以是匿名函数,也可以是有名函数的名称    时间间隔: 以毫秒作为单位返回值: 返回值为一个数值,这个数值就是该定时器的编号,可以用来删除该定时器2. clearInterval()方法作用: 清除定时器,即停止setInterval方法的执行格式: window.clearInterval(定时器编号);*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="DOM文档的加载顺序"><a href="#DOM文档的加载顺序" class="headerlink" title="DOM文档的加载顺序"></a>DOM文档的加载顺序</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 解析HTML结构2. 加载外部脚本和样式表文件3. 解析并执行脚本代码4. DOM树构建完成 ==> DOMContentLoaded事件执行5. 加载图片等外部文件6. 页面加载完毕 ==> load事件执行*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DOM节点及样式表属性的操作"><a href="#DOM节点及样式表属性的操作" class="headerlink" title="DOM节点及样式表属性的操作"></a>DOM节点及样式表属性的操作</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. nodeType属性: 获取节点类型元素节点: 1属性节点: 2文本节点: 3注释节点: 8文档节点: 9nodeName属性: 获取节点名称元素节点: 元素名称/标签名属性节点: 属性名称文本节点: #text注释节点: #comment文档节点: #documentnodeValue属性: 获取节点值元素节点: null属性节点: 属性值文本节点: 文本内容注释节点: 注释内容文档节点: null2. 注意: querySelector获取的是静态的元素,而getElementBy..获取的是动态的元素(动态: 通过js方式添加页面的元素)3. 页面节点中常见的关系://不常用 获取有问题 容易拿到空白文本节点1) childNodes: 父元素的所有子节点(包含换行)2) firstChild: 父元素的第一个子节点(包含换行)3) lastChild: 父元素的最后一个子节点(包含换行)4) parentNode: 父节点5) nextSibling: 下一个兄弟节点(包含换行)6) previousSibling: 前一个兄弟节点(包含换行)//常用 不存在空白文本节点 作用同上1) children2) firstElementChild3) lastElementChild4) parentElement5) nextElementSibling6) previousElementSibling4. 页面中特殊节点的获取1) 获取HTML节点: document.documentElement2) 获取body节点: document.body3) 获取head节点: document.head4) 获取或设置title节点: document.title 或 document.title = '值'5) 获取文档节点: document 或者 document.body.ownerDocument(也可以使用元素节点的ownerDocument属性来获取文档节点)6) 获取文档类型声明: document.doctypedocument对象的属性:1) documentURI: HTML文档地址2) URL: HTML文档地址3) domain: 返回地址中的域名部分4) lastModified: 返回文档上一次修改的时间5) location: 返回location对象 该对象用来操作url地址,包含如下属性和方法:    href: 获取或设置当前地址 能够利用它实现页面的跳转 eg: document.location.href == '地址'    assign:  设置url地址 eg: document.location.assign('地址')    注意: href属性和assign方法在实现页面跳转时都会产生浏览记录,如果要实现页面跳转还可以使用window对象的location属性来进行跳转. eg: window.location = '地址'6) readyState属性: 返回的是页面加载的状态,包含三种状态    loading: 表示正在加载HTML文档,并解析    interactive: 表示正在加载外部资源    complete: 表示整个文档加载完毕7) anchors: 获取页面中所有的具有name属性的超链接8) forms: 获取页面中的所有的form节点9) images: 获取页面中的所有的img节点10) links: 获取页面中带有href属性的超链接11) scripts: 获取页面中的所有script节点DOM操作CSS行内样式(只适用于行内样式 外部样式获取不到)ele.style.cssText //获取行内元素style属性字符串 一般不用该属性赋值 会重置原行内样式ele.style.fontSize //获取或修改带有"-"连接的属性时使用驼峰命名法行内样式表对象的方法 不需要使用驼峰命名法ele.style.setProperty(propertyName, value); //设置某个CSS属性ele.style.getPropertyValue(propertyName); //读取某个CSS属性的值ele.style.removeProperty(propertyName); //删除某个CSS属性getComputedStyle方法作用: 可以在谷歌浏览器(包含火狐等其他浏览器,不包含低版本的IE浏览器)获取或设置外部样式表或内部样式表格式: window.getComputedStyle(ele, null)返回值: 返回经过计算的元素身上的样式低版本的IE浏览器获取内部或外部样式表,可以使用currentStyle属性格式: ele.currentStyle返回值: 返回样式表对象获取内部样式或外部样式的兼容写法function getStyle(ele, cssName){    if(window.getComputedStyle == undefined){//IE浏览器        return ele.currentStyle[cssName];    }else{        return window.getComputedStyle(ele, null)[cssName];    }}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DOM常用方法"><a href="#DOM常用方法" class="headerlink" title="DOM常用方法"></a>DOM常用方法</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*appendChild()方法作用: 在父元素末尾插入新节点格式: 父节点.appendChild(新节点)注意: 具有移动节点的功能(父元素中有该子节点,通过该方法将该子节点移动到父元素末尾)insertBefore()方法作用: 将某个节点插入到目标节点前面格式: 父节点.insertBefore(要插入的新节点, 目标节点)removeChild()方法作用: 删除节点格式: 父节点.removeChild(要被删除的节点)返回值: 被删除的元素注意: 被删除的元素没有消失,放在内存中 一般通过返回值获取到被删除的元素再添加进来replaceChild()方法作用: 替换某个节点格式: 父节点.replaceChild(新的节点, 旧的节点)返回值: 被替换掉的节点isEqualNode()方法作用: 判断两个节点是否相等格式: 节点1.isEqualNode(节点2)返回值: true falsecontains()方法作用: 判断某个节点是否包含另外的某个指定的节点格式: 节点1.contaions(可能包含的节点)返回值: true falsehasChildNodes()方法作用: 判断是否有子节点格式: 节点.hasChildNodes()返回值: true(表示该元素不是一个空元素) false(表示该元素是一个空元素) */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DOM常用属性"><a href="#DOM常用属性" class="headerlink" title="DOM常用属性"></a>DOM常用属性</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*offsetParent属性: 返回的是样式偏移时的参照物1) 如果元素没有父元素,那么返回的是body2) 如果元素有父元素,但是父元素没有定位,那么返回的是body3) 如果元素有父元素且父元素有定位,那么返回的是具有定位且离该元素最近的父元素offsetTop属性: 距离偏移对象顶部的距离offsetLeft属性: 距离偏移对象左侧的距离格式: 元素节点.offsetTopoffsetWidth属性: 返回元素的宽度(包括元素宽度、内边距和边框，不包括外边距和滚动条)offsetHeight属性: 返回元素的高度(包括元素高度、内边距和边框，不包括外边距和滚动条)clientWidth属性: 返回元素的宽度(包括元素的宽度、内边距和滚动条，不包括外边距和边框)clientHeight属性: 返回元素的高度(包括元素的高度、内边距和滚动条，不包括外边距和边框)注意: 1) 如果要获取页面视口的宽度和高度,那么推荐用clientWidth和ClientHeight,如果要获取元素的宽度和高度推荐用offsetWidth和offsetHeight2) 如果要获取页面石窟的宽度和高度,需要兼容浏览器视口宽度: var viewWidth = document.documentElement.clientWidth || document.body.clientWidth;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JavaScript中事件的常用添加方法"><a href="#JavaScript中事件的常用添加方法" class="headerlink" title="JavaScript中事件的常用添加方法"></a>JavaScript中事件的常用添加方法</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 行内添加事件&lt;div onclick='fn(this)'>&lt;/div> //this指向问题,传入一个实参this,代表了当前事件所应用到的元素&lt;div onclick='fn1();fn2()'>&lt;/div> //div绑定了两个事件fn1和fn2,不会被覆盖掉&lt;div onclick='fn1()' onclick='fn2()'>&lt;/div> //事件fn2()会被屏蔽掉2. DOM0级事件处理程序添加方式: 元素节点.on事件名 = function(){    函数体};this指向问题: 在事件处理函数中直接使用this,这个this就代表了当前事件所应用到的元素删除方式: 元素节点.on事件名 = null;注意:     如果一个元素身上通过DOM0级事件处理程序添加了多个相同的事件,那么这些事件会被覆盖掉,只会绑定最后一次添加的事件3. DOM2级事件处理程序添加方式: 元素节点.addEventListener(参数1, 参数2, 参数3);参数说明:    参数1: 表示事件名称    参数2: 表示事件处理函数,可以是匿名函数,也可以是有名函数的名称    参数3: 表示事件流,值为true(事件捕获)、false(默认值,事件冒泡)删除方式: 元素节点.removeEventListener(参数1, 参数2, 参数3) 参数类型同上,如果是事件要被删除,那么在添加事件时参数2不可以是匿名函数,只能是函数名称注意:     DOM2级事件处理程序不适用于IE8及以前的浏览器版本    如果一个元素身上通过DOM2级事件处理程序添加了多个相同的事件,那么这些事件可以同时存在DOM2级事件处理程序中如何使用this: 在事件处理函数中直接使用this,这个this就代表了当前事件所应用到的元素eg:     ele.addEventListener('click', fn1, false);事件流: 所谓事件流就是页面中事件的执行顺序.可以分为两部分: 事件冒泡、事件捕获事件冒泡: 从当前元素开始逐步向外扩展事件捕获: 从根节点开始逐步向当前元素扩展*/</span><span class="token comment" spellcheck="true">//定义一个函数,该函数的功能是为元素添加事件(解决DOM2级事件处理程序在IE下不支持的问题)</span><span class="token comment" spellcheck="true">/*    ele: 表示要被添加事件的元素    eventName: 表示事件的名称    callback: 表示事件触发时要执行的操作    eventStream: 表示事件流*/</span><span class="token keyword">function</span> <span class="token function">addEvent</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> eventStream<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>addEventListener <span class="token operator">==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//IE11以下不支持addEventListener(IE11支持)</span>        ele<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span><span class="token operator">+</span>eventName<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> eventStream<span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义一个函数,该函数的功能是为元素删除事件(解决DOM2级事件处理程序在IE下不支持的问题)</span><span class="token comment" spellcheck="true">/*    ele: 表示要被删除事件的元素    eventName: 表示事件的名称    callback: 表示事件触发时要执行的操作    eventStream: 表示事件流*/</span><span class="token keyword">function</span> <span class="token function">removeEvent</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> eventStream<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>removeEventListener <span class="token operator">==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//IE11以下不支持removeEventListener(IE11支持)</span>       ele<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span><span class="token operator">+</span>eventName<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        ele<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> eventStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*事件对象: 事件对象是JavaScript中的一个内置对象,该对象记录了和当时事件相关的信息,另外事件对象也提供了大量的属性和方法帮助我们操作事件1. 事件对象的获取:    1) 谷歌浏览器: 事件对象被以实参的形式传递给事件处理函数    2) IE8及以前的低版本的IE浏览器: 可以使用window对象的event属性来获取2. 事件对象的常用属性:1) type: 获取当前事件的类型2) altKey、shiftKey、ctrlKey: 这三个属性的作用是判断是否按了键盘上的alt、shift、ctrl键,如果按了则返回true,否则返回false3) keyCode: 作用是当键盘事件被触发时,该属性可以用来获取被按下去的按键的键码值(ASCII码)4) screenX、screenY: 获取鼠标点击的点距离屏幕左侧和顶端的距离5) clientX、clientY: 获取鼠标点击的点距离视口的左侧和顶端的距离,不受滚动条的影响6) pageX、pageY: 获取鼠标点击的点距离页面左侧和顶端的距离,受滚动条的影响7) offsetX、offsetY: 获取鼠标点击的点距离元素自身左侧和顶端的距离8) currentTarget: 表示当前谁身上的事件正在被触发9) target: 获取当前哪个元素被点击了 (IE8及以下使用的是srcElement属性)10) bubbles: 判断当前事件是否支持事件冒泡,返回值为true false11) eventPhase: 该属性值为1、2、3    1: 表示由于事件捕获而引起的事件的执行    2: 表示事件流中的当前元素    3: 表示由于事件冒泡而引起的事件的执行12) button: 判断点击了鼠标的哪个按钮    0: 表示左键    1: 表示滚轮    2: 表示右键13) wheelDelta: 表示滚轮滚动的方向 上滚: 148 (120) 下滚: -148 (-120) 各个浏览器值可能不同3. 事件对象的常用方法:1) preventDefault(): 取消默认行为 (IE8及以下使用的是returnValue = false来取消默认行为) eg: 超链接的跳转2) stopPropagation(): 阻止事件冒泡 (IE8及以下使用的是cancelBubble = true来取消事件冒泡)*/</span><span class="token comment" spellcheck="true">//获取事件对象的兼容写法</span>div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//点击鼠标右键时触发 (取消鼠标右键时的功能悬停框)</span>document<span class="token punctuation">.</span>oncontextmenu <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>    e<span class="token punctuation">.</span>preventDefault <span class="token operator">==</span> undefined <span class="token operator">?</span> e<span class="token punctuation">.</span>returnValue<span class="token operator">=</span><span class="token boolean">false</span> <span class="token punctuation">:</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//拖动元素</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'box'</span> style<span class="token operator">=</span><span class="token string">"width: 200px;height: 200px;background-color: red;position: fixed;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为div添加鼠标按下事件</span>div<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取鼠标点击的点距离自身左侧和顶端的距离</span>    <span class="token keyword">var</span> div_x <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetX<span class="token punctuation">;</span>    <span class="token keyword">var</span> div_y <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetY<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为document对象添加鼠标移动事件</span>    document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取鼠标移动的点距离视口左侧和顶端的距离</span>        <span class="token keyword">var</span> body_x <span class="token operator">=</span> e<span class="token punctuation">.</span>clintX<span class="token punctuation">;</span>        <span class="token keyword">var</span> body_y <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置div的left和top的值(给div设置position)</span>        div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token punctuation">(</span>body_x <span class="token operator">-</span> div_x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token punctuation">(</span>body_y <span class="token operator">-</span> div_y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//为div设置鼠标松开的事件</span>div<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 鼠标事件click事件: 鼠标单击事件dblclick事件: 鼠标双击事件mouseover事件: 如果有后代元素,那么在进入到后代元素或者从后代元素再进入到自身时会多次触发该事件mouseout事件: 如果有后代元素,那么在进入到后代元素或者从后代元素再进入到自身时会多次触发该事件mouseenter事件: 如果有后代元素,不会重复触发mouseleave事件: 如果有后代元素,不会重复触发mousedown事件: 在鼠标压下去的时候只触发一次,不会持续触发mouseup事件: 在鼠标松开的时候触发mousemove事件: 在鼠标移动的时候触发,会持续触发mousewheel事件: 鼠标滚轮事件,其事件对象中的button属性值为0  注意: 不兼容火狐浏览器    适用于火狐浏览器的鼠标滚轮事件: DOMMouseScroll事件 注意: 需要使用DOM2级事件处理程序的添加方式来添加    该事件的事件对象中有detail属性,用来判断滚轮滚动的方法,如果是正数表示向下,负数表示向上2. 表单事件focus事件: 获取焦点时触发blur事件: 失去焦点时触发input事件: 当表单元素中的内容变化就触发change事件: 当失去焦点的时候才会触发(前提是输入框中的内容有变化)submit事件: 提交表单元素时触发,该事件可以用来阻断数据的提交,如果该事件对应的事件处理函数的返回值为false就会阻断提交  注意该事件是给form元素加reset事件: 当重置按钮被点击时触发  注意该事件是给form元素加3. 键盘事件keydown事件: 按下任意键都可以触发该事件  按下不放,事件会被连续触发keypress事件: 按下任意键都可以触发该事件(功能键除外)  按下不放,事件会被连续触发keyup事件: 释放按键时触发4. 滚动条事件scroll事件: 当拉动滚动条时触发该事件 会持续触发 如果给窗口加该事件: window.onscroll = function(){...}常用的属性(元素的属性): scrollTop/scrollLeftscrollTop: 该属性的作用是用来设置或者获取在拉动滚动条时被卷上去的内容的高度 结果为数值scrollLeft: 该属性的作用是用来设置或者获取在拉动滚动条时被卷到左侧的内容的宽度 结果为数值注意: 在拉动窗口的滚动条时,如果要获取scrollTop或scrollLeft,不可以使用window.scrollTop或window.scrollLeft,因为window对象没有这两个属性,需要在document.documentElement或者document.body对象中去获取eg: var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;5. 移动端事件touchstart事件: 当手指触摸到屏幕或指定元素时触发touchmove事件: 当手指在屏幕或指定元素上移动时触发touchend事件: 当手指从屏幕离开时触发touchcancel事件: 当系统停止跟踪触摸时触发 (例如电话接入或弹出信息)移动端事件对象中常用的属性:touches: 该属性中主要保存放到屏幕上的所有触摸点的相关信息 (一个或多个手指触摸,只记录手指按下) targetTouches: 该属性主要保存了和当前元素相关的触摸点信息 (一个或多个手指触摸,只记录手指按下)changedTouches: 该属性主要保存了由触摸点变化形成的信息 (手指按下和离开时都有记录)6. 文档事件load事件: 当文档中所有节点都加载完毕后触发该事件 如文档的所有图片加载完 通常该事件是给window对象添加的DOMContentLoaded事件: 该事件和load事件类似,但是该事件的触发事件早于load事件,因为该事件会在DOM树渲染完毕后触发,而load事件只有在整个文档加载完毕后触发 注意: 该事件只能用DOM2级事件处理程序添加事件readystatechange事件: 文档加载状态判断事件 (即document.readyState值发生改变时触发 属性值: loading(加载DOM中) interactive(加载外部资源) complete(加载完成))*/</span><span class="token comment" spellcheck="true">//兼容火狐的滚轮事件</span><span class="token keyword">function</span> <span class="token function">gd</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>    <span class="token keyword">var</span> direction <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//滚动方向</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//有值</span>       direction <span class="token operator">=</span> e<span class="token punctuation">.</span>wheelDelta<span class="token operator">></span><span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//火狐</span>       direction <span class="token operator">=</span> e<span class="token punctuation">.</span>detail<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ele<span class="token punctuation">.</span>onmousewheel <span class="token operator">=</span> gd<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//谷歌</span>ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMMouseScroll'</span><span class="token punctuation">,</span> gd<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//火狐</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*事件委托也被称为事件代理,就是指将事件委托给祖先元素,然后利用事件冒泡机制和事件对象让该祖先元素下面的所有后代元素可以具有同一类型的事件好处: 如果是用普通的方式给每个子元素加事件使用的是querySelectorAll方法,不能获取动态js添加的子元素,使用事件委托就可以避免这种情况(事件是加在祖先元素上的)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*BOM: Browser Object Model浏览器对象模型,它不是一个对象,可以说是一个对象的集合.它里面有很多对象,利用这些对象可以操作浏览器即浏览器中的内容.主要包含如下对象: window、location(浏览器当前URL信息)、history(浏览器访问历史信息)、screen(客户端屏幕信息)、navigator(浏览器本身信息)、document(文档对象)等.在众多属性中window属性是BOM中的顶级属性,其他对象都是window对象的属性,只不过本身也是对象类型*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="window对象-global"><a href="#window对象-global" class="headerlink" title="window对象 (global)"></a>window对象 (global)</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 定义:1) window对象是BOM中的顶级对象,其他对象是window对象的一个属性.2) window对象也是一个全局对象,因为在全局作用域下面定义的所有的变量、方法都相当于给window对象绑定属性和方法,可以使用window.的形式来使用这些属性和方法.在平时使用时可以将window.省略.3) 如果是全局的变量或方法,还可以使用this.的形式来调用,因为在全局环境下window === this4) window对象不需要手动创建,当浏览器窗口被打开时,后台会自动创建一个用来管理当前窗口的window对象.当浏览器窗口被关闭时该对象会被自动销毁2. window对象常用方法:1) alert(): 弹出警告框 不解析标签  支持转义字符2) confirm(): 弹出确认框 返回值为true或false3) prompt(): 弹出输入框4) isNaN(): 判断参数是否是NaN 返回值为true表示是NaN,否则不是NaN5) isFinite(): 判断参数是否为有限数值 返回值为true表示是有限,否则不是有限6) open():    作用: 打开新窗口    格式: window.open('地址', '窗口名称', '窗口特性'),三个参数都可以省略,如果省略表示打开一个空白窗口    参数说明:        地址: 新窗口网站地址        窗口名称: 窗口名称可以不写,如果不写,那么会多次打开新窗口.如果写,那么会打开一次新窗口,后面在执行open方法时会在上一次打开的窗口里面重新加载页面        窗口特性: eg: 'width=200 height=300 left=300 top=300'    返回值: 返回值是代表新窗口的window对象7) close():    作用: 关闭当前窗口    格式: window.close()8) setInterval()/clearInterval(): 用来设置定时器,能够在一定的时间间隔下重复执行某个操作 / 清除该方法9) setTimeout()/clearTimeout(): 在指定的延迟时间后来执行代码 / 清除该方法10) focus(): 把键盘焦点给予一个窗口11) blur(): 把键盘焦点从顶层窗口移开12) moveBy、moveTo、resizeTo、resizeBy、scrollBy、scrollTo ...3. window对象常用属性:1) name: 默认值为空字符串,该属性可以用来在不同窗口间进行数据的传递 (原理: 通过a标签跳转到新地址,新地址中给window.name赋值,再回退到原页面,原页面中的window的name就会有值  两个页面使用的是一个window)2) screenX: 获取浏览器窗口距离屏幕左侧的距离   screenY: 获取浏览器窗口距离屏幕顶端的距离3) outerHeight: 设置或返回一个窗口的外部高度,包括所有界面元素(如工具栏/滚动条)   outerWidth: 设置或返回一个窗口的外部宽度,包括所有界面元素(如工具栏/滚动条)4) innerHeight: 返回窗口的文档显示区的高度 (适用于移动端获取视口的高度)   innerWidth: 返回窗口的文档显示区的宽度 (适用于移动端获取视口的宽度)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*常用属性:1. hostname: 返回web主机的域名2. pathname: 返回当前页面的路径和文件名3. port: 返回web主机的端口4. protocol: 返回所使用的web协议(http: 或 https:)5. search: 是一个可读可写的字符串,可设置或返回当前url的查询部分(获取的是从?之后的部分,包含?)    用来获取向服务器请求时的参数字符串*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="navagator对象"><a href="#navagator对象" class="headerlink" title="navagator对象"></a>navagator对象</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*常用属性:1. appCodeName: 浏览器代码名的字符串表示2. appName: 官方浏览器名的字符串表示3. appVersion: 浏览器版本信息的字符串表示4. userAgent: 返回和浏览器内核相关的信息5. cookieEnabled: 如果启用cookie返回true,否则返回false6. javaEnabled: 如果启用java返回true,否则返回false7. platform: 浏览器所在计算机平台的字符串表示*/</span>eg<span class="token punctuation">:</span> 如果window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent的返回值中出现了Mobile<span class="token punctuation">,</span>可以确定用户使用的是移动设备<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>history对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*常用方法:1. back(): 跳转到栈中的上一个页面2. forward(): 跳转到栈中的下一个页面3. go(num): 跳转到栈中的指定页面*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*script默认的加载顺序是从上到下加载中script标签的属性:defer: 延迟加载,等DOM节点都加载完后再加载 属性值和属性名相同async: DOM加载和js脚本加载异步执行,同时进行    优势: 避免了因DOM文件过大导致的文件加载阻塞    缺陷: 无法确定js脚本到底何时执行,并仅对外部js脚本生效*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浏览器性能优化"><a href="#浏览器性能优化" class="headerlink" title="浏览器性能优化"></a>浏览器性能优化</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*回流(重排): 当render tree中的一部分(或全部),因为元素的规模尺寸、布局、隐藏等改变而需要重新构建 每个页面至少有一次回流(即页面在第一次加载的时候)重绘: 当render tree中的一些元素需要更新属性,而这些属性只是影响元素的外观、风格,而不会影响布局的,比如color ...注意: 回流必将引起重绘,而重绘不一定会引起回流引起回流和重绘的原因:1) 页面初始渲染2) 改变字体,改变元素尺寸(宽、高、内外边距、边框、改变元素位置等)3) 改变元素内容 (文本或图片或用户在input框中输入文字)4) 添加或删除可见DOM元素 (如果是删除本身就存在display:none的元素不会发生回流visibility:hidden的元素显示或隐藏不影响回流)5) fixed定位的元素,在拖动滚动条的时候回一直回流6) 调整窗口大小7) 计算offsetWidth和offsetHeight属性    如何从回流和重绘方面提高浏览器性能1) 不要一项一项去修改样式,尽可能一口气写完(可以写在一起,不要被打断),最好使用style.cssText2) 读写DOM尽量放在一起3) 使用文档碎片 document.createDocumentFragment()4) 使用fixed或absolute可以减少回流和重绘documentFragment (文档碎片)nodeType的值为11,nodeName的值为#document-fragment1) documentFragment是一种文档片段,一种'轻量级节点'2) 通常作为仓库来使用,不存放在DOM树上,是一种游离态用途:当使用js添加多个节点时,节点加入到DOM树上时,节点需要一个个渲染,这样节点数较多时就会影响浏览器的渲染效率可以将创建的节点都放在documentFragment这样的节点上,然后把documentFragment加入到DOM,只需要完成一次渲染就可以达到之前渲染很多次的效果*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="call和apply"><a href="#call和apply" class="headerlink" title="call和apply"></a>call和apply</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*call和apply都是用来扩展函数的作用域范围1. call的格式: 函数.call(借用者, 参数1, 参数2, ...)2. apply的格式: 函数.apply(借用者, [参数1, 参数2, ...])3. 说明: call和apply方法是函数对象的两个方法 利用这两个方法来扩展函数的作用域时,借用过来的函数不再需要手动调用*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*定义: 正则表达式也被称为规则表达式,它是由一些普通字符和特殊字符(也称为元字符)构成的表达式.作用: 用来验证字符串是否符合格式要求,或者判断字符串中是否包含指定格式的子串1. 字面量形式创建正则表达式: var 正则表达式名称 = /表达式内容/修饰符2. 利用构造方法创建正则表达式: var 正则表达式名称 = new RegExp('表达式内容', '修饰符');修饰符:i: 表示忽略大小写g: 表示全局匹配ig: 表示即忽略大小写也全局匹配3. test方法1) 作用: 用来判断字符串是否符合正则表达式的格式要求,如果符合要求返回true,否则返回false2) 格式: 正则表达式.test(字符串);4. 正则表达式的构成: 普通字符、特殊字符1) 普通字符: 字母、数字、_(下划线)2) 特殊字符(元字符):    ① 定位符:    ^: 表示以某个字符开头    $: 表示以某个字符结尾    注意: 如果正则表达式中既有^又有$,那么在匹配时无论是内容还是字符的个数都要匹配    ② 表示数量的限定符:    *: 表示它前面的字符个数为0到无穷多个    +: 表示它前面的字符个数为1到无穷多个    ?: 表示它前面的字符个数为0到1个    {n}: 表示它前面的字符个数只能是n个    {n,m}: 表示它前面的字符个数为n-m个    {n,}: 表示它前面的字符个数为n到无穷多个    ③ 转义字符: 转义字符就是指在普通字符前面加反斜线,使它具有特定的功能和含义.也可以在具有特定功能和含义的字符前加反斜线,将它转化为普通字符,如\d表示任意一个数字,如\/表示将正则表达式中的斜线转换为普通的斜线    \d: 表示任意一个数字    \D: 表示任意一个非数字    \w: 表示任意一个字母、数字、下划线    \W: 表示任意一个非字母、数字、下划线    \s: 表示任意一个空白符,如空格、制表符(Tab键)    \S: 表示任意一个非空白符    ④ 备选字符集    [值1值2值3值4]: 中括号里面的值表示字符串中可以匹配到的任意一个值    [值1-值n]: 表示值1到值n键的任意一个值为备选选项    [^值1值2值3]: 表示字符串中不可以包含中括号里面的任意一个值    [\u4e00-\u9fa5]: 表示任意一个汉字    ⑤ 分组和选择    (): 表示分组    |: 表示或的意思    ⑥ 其他    .: 点表示除了\n之外的任何字符    \b: 匹配单词边界 注意: 所谓单词就是指字母、数字、下划线构成的连续字符    \B: 匹配单词的非边界5. exec方法作用: 该方法是正则表达式对象的一个方法,可以利用这个方法在字符串中检索是否有和该正则表达式匹配的子串,如果有则返回,类似于match方法格式: 正则表达式.exec(字符串);注意: 该方法即使加上全局匹配的修饰符也是最多只返回一个匹配的字符,想要全局匹配就需要多次调用该方法 每次调用该方法后该方法对应的指针指向的就是上次匹配的字符索引的下一个位置,依次类推,直到返回null时,指针重新指向字符串索引为0处6. 贪婪模式和懒惰模式贪婪模式: 如果正则表达式中有表示数量的特殊字符,如*、+、{n,m}等,在匹配时会尽可能多的匹配字符,默认懒惰模式: 如果正则表达式中有表示数量的特殊字符,如*、+、{n,m}等,在匹配时会尽可能少的匹配字符注意: 如果要将贪婪模式改为懒惰模式,只需要在数量词后面加上?即可*/</span>eg<span class="token punctuation">:</span> 将字符串str转换为数组<span class="token punctuation">,</span>以数字作为分隔符<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'he2ll3ow4or1ld'</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\d/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// str.split(/[0-9]/) 也可以实现</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>注意<span class="token punctuation">:</span> 字符串的search方法在匹配到第一个字符串后就停止匹配<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hash表去重"><a href="#hash表去重" class="headerlink" title="hash表去重"></a>hash表去重</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*原理: 将已经出现过的元素当做属性名,存入一个对象中,下标的引用要比用indexOf搜索数组快的多缺点: 内存占用很多,以牺牲空间换取时间*/</span>eg<span class="token punctuation">:</span> <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">888</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*升序特点: 进行数组长度-1轮次 每轮结束会依次在数组末尾生成一个最大数 第二大数 ... 依次向前排列每轮结束后生成的最大数不参与下轮的比较*/</span>eg<span class="token punctuation">:</span> <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*特点: 在数组中随机选择一个中间值,将大于中间值的元素放在右边,小于中间值的元素放在右边使用递归调用*/</span>eg<span class="token punctuation">:</span> <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>myArr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断数组的长度是否是0或1,如果是直接返回该数组</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>myArr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> myArr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取数组中基准值的下标</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>myArr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据下标获取中间值,并删除中间值</span>    <span class="token keyword">var</span> midValue <span class="token operator">=</span> myArr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义两个空数组用来接收比中间值小和比中间值大的数</span>    <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历数组,用数组中的剩余元素和中间值比较,如果比中间值小存放在left中,否则存放在right中</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>myArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>myArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> midValue<span class="token punctuation">)</span><span class="token punctuation">{</span>           left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>myArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>myArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>midValue<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*使用二分查找法,必须保证数组是有序的*/</span>eg<span class="token punctuation">:</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//利用二分查找法,在数组中查找指定元素,将数组元素的下标返回</span><span class="token keyword">function</span> <span class="token function">checkIndex</span><span class="token punctuation">(</span>myArr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义数组的开始和结束索引</span>    <span class="token keyword">var</span> beginIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> endIndex <span class="token operator">=</span> myArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>beginIndex <span class="token operator">&lt;=</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取中间值的索引</span>        <span class="token keyword">var</span> midIndex <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>beginIndex <span class="token operator">+</span> endIndex<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> myArr<span class="token punctuation">[</span>midIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> midIndex<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> myArr<span class="token punctuation">[</span>midIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            endIndex <span class="token operator">=</span> midIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> myArr<span class="token punctuation">[</span>midIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            beginIndex <span class="token operator">=</span> midIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组中没有找到该元素</span><span class="token punctuation">}</span><span class="token keyword">var</span> valueIndex <span class="token operator">=</span> <span class="token function">checkIndex</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. JSON: JSON是JavaScript Object Notation的缩写,它是一种数据格式.JSON的本质是一个字符串.2. JSON中的构成元素: 简单值、对象、数组1) 简单值: 数值型、字符型、布尔型、Null,注意没有undefined2) 对象: 用来存储无序的属性,注意对象不可以有名称,也不可以以分号作为结尾,没有函数3) 数组: 用来存储有序的数据,注意数组也不可以有名称,也不可以以分号结尾3. 注意:1) JSON中对象的键值对,键必须用双引号包起来2) JSON中的字符串必须用双引号包起来4. JSON对象的书写位置1) 可以写在独立的JSON文件中,文件的拓展名为.json2) 将JSON写在js文档中5. JSON字符串与JS对象之间的相互转化1) parse方法: 将JSON字符串转换为JS对象 格式: window.JSON.parse('JSON字符串')2) stringify方法: 将JS对象转换为JSON字符串 格式: window.JSON.stringify(js对象)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 对象: 指具有特定功能的无序的属性和方法的集合2. 如何创建对象: 字面量形式、构造方法3. 自定义构造方法function 构造方法名称(形参1, 形参2){    this.属性1 = 形参1;    this.属性2 = 形参2;    this.方法1 = function(){}    this.方法2 = function(){}}var obj = new 构造方法名称(实参1, 实参2);//调用构造方法构造方法在执行时的流程:1) 如果有形参,那么现将实参的数据传递给构造函数的形参.并创建一个空对象,让this指向这个空对象2) 执行构造函数的语句,为空对象(this)绑定属性并初始化3) 将创建好的对象返回给外部4. 构造方法中的变量可以通过函数来操作function Student(age){    var sign = 1;    this.age = age;    this.getSign = function(){        return sign;    }}5. 静态属性和静态方法定义: 给构造方法直接绑定属性和方法作用: 一般是用来检测构造方法的变化注意: 只能用构造函数来调用eg: Student.a = '静态属性';Student.fn = function(){console.log('静态方法')};var str = Student.a;//静态属性的调用Student.fn();//静态方法的调用6. 构造方法在使用时的注意事项1) 构造方法的名称的首字母大写,目的是和普通方法做区分2) 构造方法的名称代表了对象的类型3) 调用时必须要加new4) 构造方法中为对象绑定的属性为私有属性,即通过该构造方法创建对象时,每个对象都会有一份属性,并且这些属性互不干扰7. 构造方法的不足如果将所有的属性和方法都封装到构造方法中,那么当其属性值相同时,势必造成内存资源的浪费(因为构造方法里面的所有东西,会在创建对象时给每个对象身上绑定一份这样的属性).解决: 将属性值相同的内容存放到'公共空间' -- 原型8. instanceof操作符作用: 判断某个引用类型的数据的具体类型格式: 数据 instanceof 类型返回值: 如果属于该类型则返回true,否则返回false9. hasOwnProperty方法作用: 判断某个属性是否为对象的私有属性格式: 对象.hasOwnProperty('属性名称');返回值: 如果是则返回true,否则返回false10. in关键字 (for...in 用来遍历对象的属性)作用: 判断对象是否有某个属性(不论是公有还是私有的)格式: '属性名称' in 对象名称返回值: 如果是则返回true,否则返回false*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 原型: 每个函数中都会有一个属性-prototype属性,这个属性指向了一个对象,这个对象就被称为原型对象,简称原型.原型中存储的是通过构造方法创建出来的所有对象可以共享的内容.可以使用构造方法名称.prototype属性来获取原型对象2. 原型对象属性的操作(增删改查):eg:function Student(age){    this.age = age;}var stu = new Student(10);//创建原型属性Student.prototype.country = '中国';Student.prototype['hairColor'] = 'black';Student.prototype.speak = function(){...};//使用(获取或修改) 通过原型使用var country = Student.prototype.country;Student.prototype.country = '俄罗斯'//使用(获取) 通过对象使用var country = stu.country;//删除原型中的属性delete Student.prototype.country;3. 为什么对象可以直接获取原型中的内容因为每个对象的内容上有一个_proto_属性,这个属性指向了创建该对象时的原型对象.当利用对象去查找某个属性的时候,属性的查找顺序: 先从自身的私有属性中查找,如果私有属性中有要查找的属性,则返回对应的值,如果私有属性中没有要查找的属性,则沿着_proto_的指向,到原型对象中查找,如果有则返回对应的值.如果私有属性和原型中的属性名称相同,那么私有属性会将原型中的该属性屏蔽掉.*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*变量: 全局变量和局部变量注意: 在函数内部,当全局变量和局部变量同名时,局部变量会将全局变量屏蔽掉,如果要使用全局变量,需要加window.或this.作用域链: 在每个函数内部都有一个属性,这个属性是[[scope]]属性,这个属性时不可以操作的.该属性指向了一个集合,这个集合中保存了当前作用域下面变量对象(所谓变量对象是指在每个作用域下面都会有一个对象,该作用域下面定义的所有的属性和方法都是向这个对象添加的属性和方法,全局作用域下面的变量对象就是window对象)的地址,以及上级作用域下面的变量对象的地址,这个集合就是作用域链.当在使用某个变量时,先从当前作用域下面变量对象身上查找,如果有则返回其值,如果没有则沿着作用域链向上级作用域中的变量对象身上查找,如果有则返回其值,如果没有则继续向上查找,依次类推,当找到window对象依然没有找到该变量,那么则报错.*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 闭包: 1) 从广义上将被定义在其它函数内部的函数就是闭包2) 从狭义上讲外部函数返回的持有外部函数变量的内部函数,被称为闭包eg: 狭义上的闭包 (常用)function fn(){    var num = 100;    return function(){        console.log(num);    };}2. 闭包的作用: 可以将外部函数定义的变量拿到函数外部来操作,即闭包在它所在的外部函数和全局环境间建立桥梁3. 闭包的工作原理: 按道理说,每个函数在执行完毕后会从内存中将该函数弹出,如果函数被从内存中弹出,那么该函数的作用域链由于没有东西对它进行引用,那么这个作用域链就会被销毁,作用域链被销毁,那么该函数的变量对象也就没有被引用,变量对象也就会被销毁.闭包之所以可以在外部函数执行完毕后依然能够使用外部环境的变量,是因为当外部函数被销毁时,由于闭包中使用了外部函数的变量对象中的内容,所以外部函数的变量对象依然会被保存在内存中.4. 闭包的不足: 由于闭包会将上级作用域下面的变量对象保存在内存中,那么如果程序中有大量的闭包,势必造成内存的资源浪费.建议在不使用闭包的时候,手动将闭包清除.*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*继承就是在两个构造方法间建立起来的某种关系,通过这种关系,可以让下级构造方法创建出来的对象享用上级构造方法获取原型中的内容.继承的方式: 借用构造方法继承、原型链继承、组合继承1. 借用构造方法继承,格式如下:function Person(name, age, gender){//上级构造方法    this.name = name;    this.age = age;    this.gender = gender;}function Student(name, age, gender, subject, teacher, school){//下级构造方法    Person.call(this, name, age, gender);//也可以使用apply方法实现借调    this.subject = subject;    this.teacher = teacher;    this.school = school;}注意: 借用构造方法继承,继承的是上级构造方法对私有属性的绑定和初始化功能,不能继承上级构造方法原型中的内容2. 原型链继承: 就是让下级构造方法的prototype属性指向上级构造方法创建出来的实例(对象)格式:function Person(){}//上级构造函数function Student(){}//下级构造函数Student.prototype = new Person();Student.prototype.constructor = Student;//指回自己的构造方法原型链: 所谓原型链就是通过原型链继承,在原型之间建立起来的一条链式结构,我们把这条链式结构称为原型链.当对象在操作属性时,先从自身的私有属性查找,如果有则返回对应的属性值,如果没有则沿着自身的_proto_属性到它的原型中查找,如果它的原型中也没有,那么就沿着原型链继续向上查找,如果找到则返回对应值,如果找到object原型也没有对应的属性则返回undefined如果采用原型链继承就会导致下级构造方法原型中的constructor属性的指向改变(constructor属性是原型中的一个属性,这个属性默认指向它的构造方法,如果采用原型链继承,那么constructor属性的指向就不再指向自己的构造方法,所以需要我们将它重新指回自己的构造方法)3. 组合继承: 借用构造方法继承和原型链继承的组合,通过构造方法继承可以继承上级构造方法对私有属性的绑定和初始化功能,通过原型链继承可以继承上级构造方法原型中的内容*/</span>eg<span class="token punctuation">:</span> 组合继承<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>speak <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>native <span class="token operator">=</span> <span class="token string">'中国'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> teacher<span class="token punctuation">,</span> school<span class="token punctuation">)</span><span class="token punctuation">{</span>    Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>teacher <span class="token operator">=</span> teacher<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school<span class="token punctuation">;</span><span class="token punctuation">}</span>Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="this的使用场景"><a href="#this的使用场景" class="headerlink" title="this的使用场景"></a>this的使用场景</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 在文档中直接使用this,this代表window对象2. 如果在全局变量或全局函数前面使用this,this代表window对象3. 如果是HTML事件处理程序,那么将this作为事件处理函数的实参传递给事件处理函数,this代表应用事件的元素4. 如果是DOM0级事件处理程序,事件处理函数中的this代表应用事件的元素5. 如果是DOM2级事件处理程序,事件处理函数中的this代表应用事件的元素6. 在字面量形式创建的对象中,如果将this放在对象方法内,这个this代表的是当前的字面量对象7. 在构造方法中,如果将this放在属性名称前面,这个this代表的该构造方法创建出来的对象.如果将this放在某个函数中,那么这个this代表调用该函数的对象8. 如果将this放在原型中,它代表的是使用该原型内容的对象9. 在借用构造方法继承时,call中的this代表的是下级构造方法的对象10. 如果在闭包中使用this,this代表window11. 间隔调用和延迟调用: this代表window12. 自执行函数中的this代表window*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*工厂模式: 工厂模式是JS中的一种设计模式,利用该模式可以批量创建JS对象.它的本质就是JS中的函数.格式: function createStudent(name, age, teacher){    var stu = {};    stu.name = name;    stu.age = age;    stu.teacher = teacher;    stu.speak = function(){        console.log('hello');    }    return stu;}var s = createStudent('Tom', 15, 'Timi');优点: 可以快速的创建对象缺点: 不能细化对象的类型,统一都是Object类型*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web前端基础回顾</title>
      <link href="2020/11/10/web-qian-duan-ji-chu/"/>
      <url>2020/11/10/web-qian-duan-ji-chu/</url>
      
        <content type="html"><![CDATA[<p><strong>谷歌和火狐的速度快,指的是解析页面js和css的速度</strong></p><p><strong>支持更多的新功能,如最新的html5 css3的新功能</strong></p><h1 id="HTML介绍"><a href="#HTML介绍" class="headerlink" title="HTML介绍"></a>HTML介绍</h1><h2 id="HTML基本格式"><a href="#HTML基本格式" class="headerlink" title="HTML基本格式"></a>HTML基本格式</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 文档类型声明作用:告诉浏览器按照当前标准解析代码 注意它不是html标签HTML5标准:不区分大小写,双标记的结束标记可以省略  一般不省略HTML4.01 版本: 严格 过渡 框架集XHTML: 严格的HTML,区分大小写,结束标记必须写上DTD: 文档类型定义 等同于 DOCTYPE--></span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 字符集  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>加粗 bold<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>斜体 italic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>下划线 underline<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>删除线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>s</span><span class="token punctuation">></span></span>删除线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>s</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>强调 倾斜显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>强调  加粗显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>上标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>下标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>big</span><span class="token punctuation">></span></span>大号字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>big</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>小号字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    块级元素块级元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 无序列表    ul: unorder list    li: list itemul和li的属性type: 设置项目符号的类型 (css中为list-style-type)取值:disc: 黑色实心圆circle: 黑色空心圆square: 黑色实心正方形none: 取消项目符号--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新窗口打开链接: 所有内容写在li里<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--  有序列表    ol: order list    li: list itemol和li的属性type: 设置项目符号取值: 1: 数字i: 小写罗马字母I: 大写罗马字母a: 小写字母A: 大写字母start: 从第几个开始 默认是从第一个开始 取值: numberreversed: 倒叙排列符号  取值: reversed 当属性和属性值相同 可以简写为属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新窗口打开链接: 所有内容写在li里<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 自定义列表--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--    cellspacing: 单元格之间的距离    cellpadding: 内容距离边框的距离    colspan: 水平合并    rowspan: 垂直合并--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span> <span class="token attr-name">algin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 1. 表单的作用提交数据,使页面具有交互性form之间不能相互嵌套,一个页面可以有多个表单默认为get提交2. 标签&lt;form action="提交的地址" name="表单名称" method="提交的方式 get|post">    内容&lt;/form>3. 表单元素的属性type 类型name 名称value 当前值checked 默认被选中,配合单选按钮和多选按钮来使用selected 默认显示,配合option使用readonly 只读disable 禁用get与post的区别:1) get提交数据不安全,会在地址栏中显示,post安全2) get提交数据大小有限制(不能大于2kb),post理论上没有限制--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form1<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    姓名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    密码: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>passwod<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    性别: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    爱好: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fav<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>唱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fav<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jump<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jump<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fav<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>rap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fav<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basketball<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basketball<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>没有任何功能<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>没有任何功能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--将编码格式改为二进制enctype="multipart/form-data" 作用: 将上传的文件转换为二进制--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form2<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        文件:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        隐藏域:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        照片提交按钮:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片路径<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        下拉列表:        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sh<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- optgroup 为选项分组 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>北京<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大兴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>通州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>朝阳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>河北<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>石家庄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>张家口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>保定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        多行文本框:        &lt;textarea name="liuyan"cols="30" rows="10"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="H5新增type属性"><a href="#H5新增type属性" class="headerlink" title="H5新增type属性"></a>H5新增type属性</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--     H5新增表单元素属性autofocus 自动聚焦 一般写在第一个表单元素上required 必填表单placeholder 输入框提示内容 默认提示multiple 输入多个 用逗号隔开 多配合邮箱和网址使用min和max 最小值和最大值 配合数字和范围使用minlength和maxlength 最小长度和最大长度--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        邮箱: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span> <span class="token attr-name">autofocus</span> <span class="token attr-name">required</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入邮箱<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        网址: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        搜索: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        数字: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        范围(滑块): <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        颜色:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        电话: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        日期: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        周: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>week<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        月: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>month<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        时间: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>看到标签知道表示的意思</p><p>正确的标签干正确的事情,例如网页标题用H标签,段落用P标签</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>有利于搜索引擎收录</li><li>有利于屏幕阅读者去读取</li><li>有利于开发者维护</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--div: 没有语义的块级容器span: 没有语义的行内容器--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="H5新增语义化布局标签"><a href="#H5新增语义化布局标签" class="headerlink" title="H5新增语义化布局标签"></a>H5新增语义化布局标签</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- H5新增语义化布局标签不支持IE6 7 8--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>导航栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>        文章        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>章节<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>侧边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>页脚<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="H5新增视频和音频标签"><a href="#H5新增视频和音频标签" class="headerlink" title="H5新增视频和音频标签"></a>H5新增视频和音频标签</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--1. 视频(行内元素)1) 支持格式 mp4 ogg(移动端) weM(高清格式)2) 标签&lt;video>您的浏览器不支持视频&lt;/video>3) 属性src 必须属性 视频路径autoplay 自动播放loop 循环播放controls 显示控制面板 各个浏览器可能有差异muted 静音width 宽度height 高度poster 视频播放前显示一张图片preload 一边播放 一边缓存 如果是autoplay 可以忽略该属性2. 音频(行内元素)1) 支持格式 mp3 ogg wav2) 标签&lt;audio>您的浏览器不支持音频&lt;/audio>3) 属性src 必须属性 视频路径autoplay 自动播放loop 循环播放controls 显示控制面板 各个浏览器可能有差异muted 静音preload 一边播放 一边缓存 如果是autoplay 可以忽略该属性3. 资源1) 作用给浏览器提供多种视频或音频格式的选择2) 标签&lt;source/>3) 属性src 必须属性 路径4) 例子&lt;video>    &lt;source src="video1.mp4"/>    &lt;source src="video1.ogg"/>    &lt;source src="video1.webM"/>    您的浏览器不支持视频&lt;/video>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>视频文件路径<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">loop</span> <span class="token attr-name">muted</span> <span class="token attr-name">poster</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>照片路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    您的浏览器不支持视频<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>音频文件路径<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span> <span class="token attr-name">loop</span> <span class="token attr-name">muted</span><span class="token punctuation">></span></span>您的浏览器不支持音频<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="H5新增标签"><a href="#H5新增标签" class="headerlink" title="H5新增标签"></a>H5新增标签</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 一般用于组合图片和文字使用(块级元素)     img标签本身是行内元素--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片路径<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span>图片描述文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 细节(块级元素)    标题左侧有交互小箭头 点击可以显示和隐藏内容--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        内容.........    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 突出显示(行内元素)    mark标签内的内容会加上黄色的背景颜色--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    内容内容内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mark</span><span class="token punctuation">></span></span>内容内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mark</span><span class="token punctuation">></span></span>内容内容内容内容内容内容内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 刻度(行内元素)属性min和max 设置刻度的最小值和最大值value 设置当前刻度值low和high 设置最低预警值和最高预警值 当前刻度值低于最低预警值和高于最高预警值刻度会变色--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meter</span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span> <span class="token attr-name">low</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">high</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>您的浏览器不支持刻度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>meter</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 进度条(行内元素) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>progress</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>您的浏览器不支持进度条<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>progress</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 数据列表(行内元素)使用数据列表必须与input标签关联才能使用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BJ<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SH<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GG<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>广州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 画布(行内元素) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>您的浏览器不支持画布<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实体字符"><a href="#实体字符" class="headerlink" title="实体字符"></a>实体字符</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--HTML中存在不能识别的文本,可以用实体字符来代替eg:空格 HTML中只能识别一个空格 &amp;nbsp;&lt; 小于 &amp;lt;> 大于 &amp;gt;...--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CSS介绍"><a href="#CSS介绍" class="headerlink" title="CSS介绍"></a>CSS介绍</h1><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--1. css介绍Cascading Style Sheets层叠样式表 级联样式表 简称样式表2. css文件后缀.css3. 作用1)实现了内容与表现的分离2)提高了代码的可重用性和可维护性4. css特点1) 继承性子元素可以继承父元素的样式2) 层叠性一个元素可以设置多个样式3) 优先级优先级大的样式生效优先级相同,后写的样式生效5. css语法css属性 属性:属性值; (html属性的语法: 属性="属性值")6. css注释/* 注释的内容 */注释之间不能相互嵌套--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css引入方式"><a href="#css引入方式" class="headerlink" title="css引入方式"></a>css引入方式</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--引入css的目的: 把html和css关联起来1) 行内样式 内联样式   --只对当前元素生效通过html的style属性2) 内部样式    --只对当前页面生效3) 外部样式   --实现了内容与表现的完全分离,提高了代码的可重用性和可维护性① 新建.css文件② 在head标签中通过link标签引入css一个html可以引入多个css文件同一个css文件可以被多个html引用4) 导入式 在style标签中通过 ① @import "css文件路径" ② @import url("css文件路径")来导入css样式优先级:行内样式>内部样式=外部样式@import与link的区别:1) 加载顺序不同,@import先加载html文件再加载css文件,link同时加载html和css文件2) @import只能引入css文件,link还可以引入其它内容&lt;link ref="icon" href="图标文件路径" />3) @import有兼容性(IE5以上支持) link没有兼容性4) JavaScript操作DOM时,只能操作link引入的css5) @import会增加页面的http请求--></span>1) eg:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>2) eg:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">element </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">backgroud-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>3) eg:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css文件路径<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>4) eg:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token atrule"><span class="token rule">@import</span> <span class="token string">"css文件路径"</span><span class="token punctuation">;</span></span>    <span class="token atrule"><span class="token rule">@import</span> <span class="token url">url("css文件路径")</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--1. 基础选择器1) 全局选择器 通用选择器*{}范围: 选中页面所有元素2) 元素选择器div{}p{}a{}img{}b{}范围: 选中所有指定的元素3) 类选择器.className{}范围: 所有由class属性且属性值等于className的元素类名可以重复一个class可以起多个名字,用空格隔开命名规则:① 可以包含数字 字母 -② 不能以数字开头③ 起有意义的名字4)ID选择器#idName{}ID具有唯一性选择器优先级: 选中范围越小 优先级越高     行内样式>ID选择器>类选择器>元素选择器>全局选择器权重  1000     100      10       1混合使用时,可权重相加判断优先级5) 合并选择器选择器1,选择器2,选择器3,...{    共同样式}--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*字体属性具有继承性颜色的取值:1) 关键字 red green yellow2) 16进制 (0-9 a-f) 黑色: #000000 简写 #000  白色: #ffffff 简写 #fff3) rgb(0,0,0) 取值 0-255 参数颜色顺序 红 绿 蓝4) rgba(0,0,0,.5) a:透明度,取值0-1 0:完全透明 1:不透明 0.5可简写成.51. 字体颜色color: red;2. 字体大小font-size: 16px;浏览器支持的最小字体为12px3. 字体是否加粗font-weight: normal/bold/100-900;400=normal 700=bold4. 字体是否倾斜font-style: normal/italic;5. 字体 (默认宋体)font-family: 字体1,字体2,字体3;首先使用字体1,若浏览器不支持字体1,则使用字体2,依次使用,若都不支持则使用默认字体注意: 一个字体有多个单词 需要加引号*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*文本属性具有继承性1. 元素内容的水平对齐方式text-align: left/center/right;2. 文字装饰text-decoration: underline(下划线)/none/line-through(删除线)/overline(上划线);3. 英文字母大小写转换text-transform: uppercase(大写)/lowercase(小写)/capitalize(每个首字母大写);4. 首行缩进text-indent: ;取值 px empx: 绝对单位 像素em: 相对单位 相对于当前字体大小  默认为16px 1em=16pxrem: 相对单位*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表属性"><a href="#列表属性" class="headerlink" title="列表属性"></a>列表属性</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*列表属性具有继承性1. 设置项目符号list-style-type: none;2. 设置项目符号为图片(一般不用)list-style-image: url("图片路径");3. 设置项目符号的位置list-style-position: outside/inside;4. 简写list-style: none;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*行高具有继承性line-height: ;设置的是一行文字的高度当行高等于高,一行文字垂直居中可以设置为px/number(设置为number时,注意此时的行高等于当前文字的像素 × number  一般不用number)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 背景颜色background-color: transparent;(默认为透明)颜色的取值:1) 十六进制 #000  #fff2) 关键字 red green yellow3) rgb(0,0,0)  rgb(255,255,255)4) rgba(0,0,0,.5)  a: 透明度,取值为0-12. 背景图片background-image: url("图片路径");默认水平垂直平铺注意: img元素与背景图片的区别img元素: 父元素放不下 会溢出背景图片: 父元素多大  显示多大3. 背景图片是否平铺bakcground-repeat: repeat/no-repeat/repeat-x/repeat-y;4. 背景图片大小background-size: x y;取值 px % cover containcover: 覆盖整个背景区域,背景图片可能显示不完全contain: 背景图片拉伸至足够大,但是背景区域可能覆盖不完全5. 背景图片定位background-position: x y;默认在左上角 0 0取值 px % left right center top bottom当只取一个值 第二个值默认居中取正值,背景图片向右下走 取负值,背景图片向左上走6. 背景图片固定background-attachment: scroll/fixed;7. 简写background: 颜色 图片 平铺 大小 定位 固定;当简写属性和单个属性同时存在时,单个属性要写在简写属性后面*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 后代选择器选择器1 选择器2{}选中所有后代2. 子代选择器选择器1>选择器2{}选中所有直接子代3. 相邻兄弟选择器选择器1+选择器2{}平级 挨着 后面的一个兄弟4. 通用兄弟选择器选择器1~选择器2{}平级 后面的所有兄弟*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内容溢出"><a href="#内容溢出" class="headerlink" title="内容溢出"></a>内容溢出</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 元素内容溢出overflow: hidden/auto/scroll;hidden: 溢出部分隐藏auto: 自动 有溢出,显示滚动条,没有溢出则不显示滚动条scroll: 溢不溢出都显示滚动条2. 一行文字溢出省略号显示文字在同一行显示white-sapce: nowrap;溢出部分隐藏overflow: hidden;文字溢出省略号显示text-overflow: ellipsis;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 表格宽高width: ;height: ;2. 背景颜色background-color: ;3. 背景图片background-image: url("");4. 表格内容水平对齐方式text-align: left/center/right;5. 单元格内容垂直对齐方式vertical-align: top/middle/bottom;6. 边框折叠  相当于cellspacing="0"border-collapse: collapse;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css其他补充属性"><a href="#css其他补充属性" class="headerlink" title="css其他补充属性"></a>css其他补充属性</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 字符之间的距离letter-spacing: ;2. vertical-align: ;1) 在td中td内容的垂直对齐方式2) 离开td容器中元素和内容的垂直对齐方式转换成tddisplay: table-cell;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="标准盒模型"><a href="#标准盒模型" class="headerlink" title="标准盒模型"></a>标准盒模型</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 盒模型HTML每一个元素都可以看做一个盒模型2. 标准盒模型(W3c盒模型) ---浏览器默认1) 组成部分content(内容)+padding(内边距)+border(边框)+margin(外边距)2) 实际宽度width+padding(左右)+border(左右)+margin(左右)3) content 内容区域width: ; 取值 px %(相对于父元素)height: ; 取值 px %(相对于父元素)min-width: ; 最小宽度max-width: ; 最大宽度min-height: ; 最小高度max-height: ; 最大高度块级元素默认宽度为100%,行内元素默认宽度由内容撑开高度默认由内容撑开块级元素可以设置宽高,行内元素设置宽高不生效(图片归为行内元素 实际是行内块元素 可以设置宽高)4) border 边框border-style: solid(实线)/dashed(虚线)/dotted(点线)/double(双实线)/none; 必须属性,默认为黑色 3pxborder-color: ;border-width: ;简写: border: 3px solid green;单边属性:border-top: ; border-top-style: ; border-top-color: ; border-top-width: ;border-bottom: ;border-left: ;border-right: ;单边属性也可以简写border-top: 5px solid yellow;应用:画三角形原理: 取消div的宽高,设置其他三边框的边框颜色为transparent,再设置边框长度即可(IE6不支持transparent,可以将原先需要透明的边的边框设置边框样式为dashed).div1{    width: 0;    height: 0;    border-style: solid;    border-color: red transparent transparent transparent;    border-width: 50px 50px 50px 50px;}5) padding 内边距 不能取负值和auto设置内容距边框的距离语法: padding: value; 四周padding: value value; 上下 左右padding: value value value; 上 左右 下padding: value value value value; 上 右 下 左单边属性: padding-top: ; 上内边距padding-bottom: ; 下内边距padding-left: ; 左内边距padding-right: ; 右内边距注意: padding会撑大容器6) margin 外边框 可以取正负和auto设置元素之间的距离 外边距是透明的语法: margin: value; 四周margin: value value; 上下 左右margin: value value value; 上 左右 下margin: value value value value; 上 右 下 左单边属性: margin-top: ; 上外边距margin-bottom: ; 下外边距margin-left: ; 左外边距margin-right: ; 右外边距*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="块级元素水平居中"><a href="#块级元素水平居中" class="headerlink" title="块级元素水平居中"></a>块级元素水平居中</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.div1</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*核心代码*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="垂直方向上外边距合并问题"><a href="#垂直方向上外边距合并问题" class="headerlink" title="垂直方向上外边距合并问题"></a>垂直方向上外边距合并问题</h3><p><strong>当垂直方向上外边距相撞时,取较大值</strong></p><h3 id="margin-top问题"><a href="#margin-top问题" class="headerlink" title="margin-top问题"></a>margin-top问题</h3><p><strong>问题:</strong></p><p>当第一个块级子元素设置margin-top时,父元素跟着一起下来</p><p><strong>解决方案:</strong></p><ol><li><p>父元素加overflow: hidden; (找到原位置)</p></li><li><p>父元素或子元素浮动(不提倡使用,除非父元素或子元素在布局时恰好使用到浮动)</p></li><li><p>父元素加border-top: 1px solid transparent; (改变盒模型 不提倡使用)</p></li><li><p>父元素加padding-top: 1px; (改变盒模型 不提倡使用)</p></li></ol><h2 id="伪类选择器-包括CSS3新增"><a href="#伪类选择器-包括CSS3新增" class="headerlink" title="伪类选择器(包括CSS3新增)"></a>伪类选择器(包括CSS3新增)</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*:链接 表示一种状态:link 点击之前(只适用于a):visited 点击之后(只适用于a):hover 鼠标悬停(适用于所有元素):active 鼠标按下(适用于所有元素)顺序: link visited hover activecss3新增伪类选择器::first-child  第一个子元素是...:last-child  最后一个子元素是...:nth-child(number/even/odd/倍数)  第几个子元素是...even: 偶数odd: 奇数倍数: 2n  3n:only-child 唯一一个子元素是...:empty 空的子元素(元素之间任何内容都没有):not() 否定 (即不选中该元素):focus 获取焦点时的样式:checked 默认被选中时的样式(配合单选按钮和多选按钮)eg: 若div1中的第一个子元素不是div 则color不生效(即没有选中该元素).div1>div:first-child{    color: red;}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="伪对象选择器"><a href="#伪对象选择器" class="headerlink" title="伪对象选择器"></a>伪对象选择器</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*语法::before{}或者::before{}:after{}或者::after{}1) 添加文字2) 添加图片3) 添加块级元素*/</span><span class="token selector">&lt;div class="box">盒子&lt;/div>1) eg: <span class="token class">.box</span><span class="token pseudo-element">:before</span></span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"前面"</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"后面"</span><span class="token punctuation">}</span><span class="token selector">2) eg:<span class="token class">.box</span><span class="token pseudo-class">:befre</span></span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token url">url("图片路径")</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token url">url("图片路径")</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">3) eg:<span class="token class">.box</span><span class="token pseudo-element">:before</span></span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*转换为块级元素*/</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*利用的是HTML的属性[属性][属性=属性值]元素[属性=属性值]元素[属性^=属性值] 开头(属性值)元素[属性$=属性值] 结尾(属性值)元素[属性*=属性值] 包含(属性值)*/</span><span class="token selector">eg:<span class="token attribute">[class="box"]</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">div<span class="token attribute">[class="box"]</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">div<span class="token attribute">[class^="t"]</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*选中类名开头为t的div元素*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元素透明度-opacity"><a href="#元素透明度-opacity" class="headerlink" title="元素透明度 opacity"></a>元素透明度 opacity</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*opacity:设置整个元素的透明度取值 0-1 (eg: opacity: .55;)0: 完全透明1: 不透明*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="怪异盒模型"><a href="#怪异盒模型" class="headerlink" title="怪异盒模型"></a>怪异盒模型</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*怪异盒模型 IE盒模型1. 组成部分content+border+margin+padding2. 实际宽度width+margin (width包含了padding和border)3. 盒模型相互转换box-sizing: content-box; 默认值 标准盒模型box-sizing: border-box; 怪异盒模型*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 原理浮动后脱离文档流(排除到普通流之外)浮动后在页面不占据位置(原位置不保留)浮动碰到父元素的边框或浮动元素的边框就会停止浮动不会重叠浮动只有左右浮动浮动后所有元素转换为块级元素2. 语法float: left/right/none;3. 清除浮动的影响子元素浮动,父元素高度坍塌,对后面的元素产生影响1) 受影响的元素加clear: left/right/both; --浮动元素的父元素的高度依旧坍塌2) 给浮动元素的父元素加高 -- 适用于高度方便计算3) 浮动元素的父元素加overflow: hidden;(自动找到高度)4) 空div法浮动元素后面加一个空div空div{clear: both;}5) 伪对象法 (常用)浮动元素的父元素::after{    content: "";    display: block;    clear: both;}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 定义每一个元素都自带display属性2. 属性display: ;3. 属性值block 块级元素inline 行内元素inline-block 行内块,即在同一行显示,也可以设置宽高 注意:行内块会识别代码之间的空白 (一般不用)常见的行内块元素: img video audio input buttonnone 隐藏,隐藏后不占据位置flex 弹性盒模型table 表格table-cell 单元格 td4. display: none; visibility: hidden; opacity: 0; overflow: hidden;的区别display: none; 隐藏自己 隐藏后不占据位置visibility: hidden; 隐藏自己 隐藏后原位置保留opacity: 0; 透明度为0 隐藏自己 隐藏后原位置保留overflow: hidden; 溢出部分隐藏*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元素定位-position"><a href="#元素定位-position" class="headerlink" title="元素定位 position"></a>元素定位 position</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 属性position: ;2. 属性值1) static 静态定位 默认值2) relative 相对定位 相对于自己原位置定位定位后原位置保留配合left right top bottom移动应用场景:① 自己小范围移动② 配合绝对定位使用3) absolute 绝对定位 定位后原位置不保留绝对定位相对于已经定位的父元素定位(相对定位 绝对定位 固定定位)  父元素一般用相对定位 如果父元素没有定位 逐级向上找 最后相对于body定位配合left right top bottom移动应用场景:① 形成独立的一层推荐: 给绝对定位的父元素加相对定位4) fixed 固定定位相对于浏览器窗口定位定位后原位置不保留配合left right top bottom移动应用场景:① 固定在页面某个位置*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在页面中不占据位置的属性设置"><a href="#在页面中不占据位置的属性设置" class="headerlink" title="在页面中不占据位置的属性设置"></a>在页面中不占据位置的属性设置</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolate<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆叠顺序-z-index"><a href="#堆叠顺序-z-index" class="headerlink" title="堆叠顺序 z-index"></a>堆叠顺序 z-index</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*z-index: number;取值越大,层级越往上可以取负值 不推荐必须配合定位使用(相对定位 绝对定位 固定定位)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="居中问题"><a href="#居中问题" class="headerlink" title="居中问题"></a>居中问题</h2><h3 id="元素内容水平居中"><a href="#元素内容水平居中" class="headerlink" title="元素内容水平居中"></a>元素内容水平居中</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="块级元素水平居中-1"><a href="#块级元素水平居中-1" class="headerlink" title="块级元素水平居中"></a>块级元素水平居中</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="一行文字垂直居中"><a href="#一行文字垂直居中" class="headerlink" title="一行文字垂直居中"></a>一行文字垂直居中</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*设置行高等于高*/</span><span class="token property">eg</span><span class="token punctuation">:</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多行内容垂直居中"><a href="#多行内容垂直居中" class="headerlink" title="多行内容垂直居中"></a>多行内容垂直居中</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">0</span><span class="token punctuation">;</span> // 加在自己上<span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">0</span><span class="token punctuation">;</span>// 加在父元素上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="子元素在父元素中水平垂直居中-六种方法"><a href="#子元素在父元素中水平垂直居中-六种方法" class="headerlink" title="子元素在父元素中水平垂直居中  (六种方法)"></a>子元素在父元素中水平垂直居中  (六种方法)</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">answer 1): 使用margin<span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> // 找到父元素的位置<span class="token punctuation">}</span><span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">150</span>px auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">answer 2): 使用定位 需要计算<span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">answer 3): 使用padding<span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">answer 4): 使用table-cell<span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">answer 5): 使用定位 不用计算<span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //若已知子元素的宽高 可以使用margin设置<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css">answer <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 使用弹性盒法<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="圆角-border-radius"><a href="#圆角-border-radius" class="headerlink" title="圆角 border-radius"></a>圆角 border-radius</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 圆角    border-radius: ;取值: px %取值个数: 1-4取一个值: 四个角取两个值: 左上角、右下角  右上角、左下角取三个值： 左上角  右上角、左下角  右下角取四个值： 左上角开始顺时针旋转画圆 border-radius: 50%;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="阴影-box-shadow-text-shadow"><a href="#阴影-box-shadow-text-shadow" class="headerlink" title="阴影 box-shadow/text-shadow"></a>阴影 box-shadow/text-shadow</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 盒阴影 box-shadowbox-shadow: 水平方向的位置 垂直方向的位置 模糊度 尺寸(扩展度) 颜色 位置;水平方向的位置: 必须属性 取值为正负垂直方向的位置: 必须属性 取值为正负模糊度: 可选属性 取值为正值尺寸: 可选属性 取值为正负颜色: 可选属性 取值 16进制 关键字 rgb rgba位置: 可选属性 取值 outset(默认)/inset*/</span><span class="token property">eg</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span> 三个方向<span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px <span class="token number">30</span>px gold<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">)</span> 四个方向<span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">30</span>px gold inset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*2. 字阴影 text-shadowtext-shadow: 水平方向的位置 垂直方向的位置 模糊度 颜色;水平方向的位置: 必须属性 取值为正负垂直方向的位置: 必须属性 取值为正负模糊度: 可选属性 取值为正值颜色: 可选属性 取值 16进制 关键字 rgb rgba*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浏览器厂商前缀-解决浏览器对css3新特性的支持"><a href="#浏览器厂商前缀-解决浏览器对css3新特性的支持" class="headerlink" title="浏览器厂商前缀 (解决浏览器对css3新特性的支持)"></a>浏览器厂商前缀 (解决浏览器对css3新特性的支持)</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*解决浏览器对css3新特性的支持css3新特性: 圆角 盒阴影 字阴影 伪对象选择器 属性选择器 兄弟选择器等...浏览器                内核                厂商前缀谷歌                blink内核            -webkit-苹果                webkit内核        -webkit-火狐                gecko内核            -moz-IE                 trident内核          -ms-欧朋                 blink内核            -o-*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css-hack-解决IE6-7-8-的兼容性问题"><a href="#css-hack-解决IE6-7-8-的兼容性问题" class="headerlink" title="css hack (解决IE6 7 8 的兼容性问题)"></a>css hack (解决IE6 7 8 的兼容性问题)</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*解决IE6 7 8 的兼容性问题1) 条件注释法 可以在body中 head中使用 不能直接在style中使用&lt;!--[if 条件]>&lt;![endif]-->2) 属性前缀和后缀前缀 + - _ * #后缀 \0 \9 \9\0 !important(属性优先级最高)*/</span><span class="token selector">eg: &lt;!--<span class="token attribute">[if IE 7]</span>>&lt;style>body </span><span class="token punctuation">{</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style>&lt;![endif]--><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="背景渐变-线性-径向"><a href="#背景渐变-线性-径向" class="headerlink" title="背景渐变 (线性/径向)"></a>背景渐变 (线性/径向)</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 线性渐变background: linear-gradient(方向, 颜色1, 颜色2, ...);方向默认从上到下  to bottomeg: to right 、 to right bottom    deg: 弧度background: linear-gradient(120deg, #ff910e,#ffd037);2. 径向渐变 / 射线渐变  /  扇形渐变background: -webkit-radial-gradient(渐变的中心位置, 渐变的形状, 颜色1, 颜色2, ...);默认的渐变中心点在宽高的一半默认的渐变形状为椭圆eg:background: -webkit-radial-gradient(top left, circle, red, yellow, green);*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="弹性盒模型"><a href="#弹性盒模型" class="headerlink" title="弹性盒模型"></a>弹性盒模型</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*弹性盒模型 伸缩盒模型 flex box在弹性盒中float和clear不生效1. 作用 适应不同的屏幕大小多用于移动端布局2. 父元素上的属性1) 开启弹性盒模型display: flex;开启弹性盒模型后,子元素默认水平排列2) 弹性盒的方向flex-direction: row/column/row-reverse/column-reverse;row: 默认值 子元素水平排列column: 子元素垂直排列row-reverse: 子元素在水平方向上倒序排列column-reverse: 子元素在垂直方向上倒序排列3) 设置子元素在主轴的对齐方式默认X为主轴,Y轴为侧轴当flex-direction: column;时,Y轴为主轴,X轴为侧轴justify-content: flex-start/flex-end/center/space-around/space-between;flex-start: 默认值 弹性盒的主轴开始flex-end: 弹性盒的主轴结束center: 主轴居中space-around: 两侧(上下)是中间距离的一半 (分配的是父元素中的剩余空间)space-between: 在子元素之间平均分配父元素剩下的空间,左右(上下)两端没有空间4) 设置子元素在侧轴的对齐方式align-items: flex-start/flex-end/center;flex-start: 默认值 弹性盒的侧轴开始flex-end: 弹性盒的侧轴结束center: 侧轴居中3. 子元素上的属性设置弹性盒之间的宽度 (会跟随页面的缩放而改变 随着比例改变)flex-grow: number;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="转换-transform"><a href="#转换-transform" class="headerlink" title="转换 transform"></a>转换 transform</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 作用使元素在位置或形状上发生一定的改变比如: 位移 旋转 缩放 倾斜2. 属性transform: translate() rotate() scale() skew();3. 属性值1) 位移 单位 px %transform: translate(x, y)/translateX()/translateY();  x y 可以取正负2) 旋转 单位 deg (弧度) 取正值,顺时针旋转 取负值,逆时针旋转   transform: rotate(30deg)/rotateX()/rotateY();改变旋转的中心点: transform-origin: right bottom; 默认中心点为宽高的一半注意: 旋转会改变整个坐标轴,当位移和旋转同时存在时,建议位移写在旋转的前面3) 缩放 取值为number 可以取正负transform: scale()/scaleX()/scaleY();取值在0-1 缩小取值大于1 放大默认值为14) 倾斜 单位 deg (弧度)transform: skew(xdeg, ydeg)/skewX()/skewY();*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="过渡-transition"><a href="#过渡-transition" class="headerlink" title="过渡 transition"></a>过渡 transition</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 作用 使元素从一个样式平滑的过渡到另一个样式2. 过渡必须有触发事件例如鼠标悬停 鼠标点击等...3. 过渡的属性1) 过渡的属性 必选 可以取多个属性(eg: width color) 也可以直接 alltransition-property: ;可以过渡的属性:① 取值为颜色② 取值为数值③ 转换 transform: ;④ 阴影 box-shadow: ; text-shadow: ;⑤ 背景渐变 linear-gradient: ; ... 2) 过渡的持续时间  必选 单位 s/ms 可以取正值transition-duration: 1s;3) 过渡的速度变化类型transition-timing-function: ;取值:ease  先加速后减速ease-in  加速ease-out  减速ease-in-out  先加速后减速linear  匀速4) 延迟时间 单位 s/ms 延迟多久开始触发动作 transition-delay: ;可以取负值,表示把这段时间的效果直接跳过5) 简写transition: all 持续时间 速度变化类型 延迟时间;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 动画和过渡的区别1) 过渡只能制作简单的动画,动画可以制作复杂的动画从一个样式到另外一个样式,动画可以控制过程2) 过渡必须有触发事件,动画可以没有2. 定义动画@keyframes donghua {    0%或者from{    //css样式    }    百分比{    //css样式    }    100%或者to{    //css样式    }}浏览器兼容:@-webkit-keyframes name{...}3. 调用动画(关键帧动画)-webkit-animation: ;animation: name(必须) 持续时间(必须 正值) 速度变化类型(同过渡) 延迟时间(可正负) 播放次数(number/infinite) 播放方向(alternate: 偶数次倒序播放) 动画停在最后一帧(forwards);4. 属性animation-name: ; 动画的名称animation-duration: ; 持续时间animation-timing-function: ; 速度变化类型animation-delay: ; 延迟时间animation-iteration-count: ;播放次数animation-direction: ; 播放方向animation-fill-mode: ; 动画停在最后一帧animation-play-state: paused; 动画暂停播放 不简写*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*PC端布局 --float移动端布局 --dispaly: flex;响应式布局 --媒体查询 media query1. 响应式布局的定义写一次样式适用所有终端(PC端 iPad 移动端)2. 语法PC端@media screen and (min-width: 992px) {    //PC端的样式}iPad端@media screen and (max-width: 991px) and (min-width: 768px) {    //iPad端的样式}移动端@media screen and (max-width: 767px) {    //移动端的样式}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css雪碧图"><a href="#css雪碧图" class="headerlink" title="css雪碧图"></a>css雪碧图</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. css sprite  css精灵 雪碧图1) 定义雪碧图是一项图片整合技术把许多小图整合到一张大图上2) 优点① 减少图片的字节数② 减少页面的http请求③ 减少命名困扰3) 原理① 定义一个容器 设置宽高②  background-image: url(""); 引入图片③ background-position: ;移动背景图片默认背景图片显示左上角, 0 0位置注意: 容器是不可以移动的,移动的是背景图片*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多列"><a href="#多列" class="headerlink" title="多列"></a>多列</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 作用将容器中的文本分为多列2. 属性column-count: 3; //将容器中的文本分为三列column-gap: 30px; // 每列间隔30pxcolumn-rule: 2px solid red; // 每列之间的间隔线 线的长度与内容有关*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h1><h2 id="JavaScript的组成本分"><a href="#JavaScript的组成本分" class="headerlink" title="JavaScript的组成本分"></a>JavaScript的组成本分</h2><p>ECMAScript  核心JS  包含了js的基础语法、变量、数据类型、运算符、分支结构、循环结构、函数、数组、对象等</p><p>DOM  文档对象模型  规定了一套管理HTML文档的机制</p><p>BOM  浏览器对象模型</p><h2 id="JavaScript引入方式"><a href="#JavaScript引入方式" class="headerlink" title="JavaScript引入方式"></a>JavaScript引入方式</h2><h3 id="内部引入"><a href="#内部引入" class="headerlink" title="内部引入"></a>内部引入</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    js语句</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--     script标签可以写在页面任何位置    建议: 写在body结束标签之前--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外部引入"><a href="#外部引入" class="headerlink" title="外部引入"></a>外部引入</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js文件路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    script标签可以写在页面任何位置    建议: 写在head标签中    --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意: 外部方式和内部方式不能共用一个script标签,当共用一个script标签时,外部方式生效</strong></p><h2 id="JavaScript输出方式"><a href="#JavaScript输出方式" class="headerlink" title="JavaScript输出方式"></a>JavaScript输出方式</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 输出到控制台console.log();2. 输出到页面document.write();HTML标签可以直接在js中应用eg: document.write('&lt;h2>这是二号字体&lt;/h2>');3. 弹出警示框window.alert();简写为alert();注意: alert会阻止页面程序的执行*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript注释"><a href="#JavaScript注释" class="headerlink" title="JavaScript注释"></a>JavaScript注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// console.log("hello world");</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*    document.getElementById('div1');    document.write('hello world');*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript语法"><a href="#JavaScript语法" class="headerlink" title="JavaScript语法"></a>JavaScript语法</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 区分大小写 (大小写敏感)2.js语句以换行或分号结尾3. 推荐: 一行只写一条语句并且以分号结尾4. js会忽略多余的空格*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 变量的定义值可以改变的量称为变量2. 变量的作用存储数据的容器3. 变量的声明var 变量名;4. 变量的赋值变量名 = 值;等号右边的值赋值给左边5. 变量的初始化声明变量的同时,给变量赋值,称为变量的初始化var num = 1;6. 一条语句可以声明多个变量,用逗号隔开var num1 = 2, num2 = 3, num3 = num1 + num2;var num1,num2,num3;7. 声明变量没有赋值,默认为undefined8. 不声明变量直接调用,会报错 提示该变量未定义9. 重新声明,js的值不会丢失var x = 10var x;console.log(x); // 1010. 重新赋值,后面的值会替换前面的值var x = 10;x = 100;console.log(x); // 10011. 变量的声明提升js变量的声明会提前到所有代码的最上面,赋值留在原地console.log(x); // undefinedvar x = 10;12. 不写var的情况不写var声明的变量是全局变量,作用域不受控制13. 变量的命名规则1) 区分大小写2) 可以包含数字 字母 数字 下划线 $3) 不能以数字开头4) 不能是js的关键字和保留字 eg: var5) 见名知意 起有意义的名字6) 多个单词用驼峰命名法小驼峰命名法: userNameLast 推荐使用大驼峰命名法: UserNameLast*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据类型-typeof-用于判断变量的类型"><a href="#数据类型-typeof-用于判断变量的类型" class="headerlink" title="数据类型  typeof 用于判断变量的类型"></a>数据类型  typeof 用于判断变量的类型</h2><h3 id="1-number类型"><a href="#1-number类型" class="headerlink" title="1. number类型"></a>1. number类型</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*number类型:所有数字(不分正负 不分整浮 不分大小 不分进制)infinity 无穷大  -infinity 无穷小    10/infinity;//0    2/0;//infinity    infinity/infinity;//NaN    infinity/2;//NaN    infinity === infinity;//true    Number.isFinite();//检查提供的值是否是有限数 返回布尔类型NaN*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-string类型"><a href="#2-string类型" class="headerlink" title="2. string类型"></a>2. string类型</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*string类型:引号包裹的任何文本单双引号都可以注意: 两个string类型数据比较大小,比较的是ASCII值*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-布尔类型"><a href="#3-布尔类型" class="headerlink" title="3. 布尔类型"></a>3. 布尔类型</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*布尔类型只有两个值: true false*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-undefined-未定义类型"><a href="#4-undefined-未定义类型" class="headerlink" title="4. undefined  未定义类型"></a>4. undefined  未定义类型</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*未定义类型表示数据类型不确定声明一个变量,没有赋值,默认值为undefined,数据类型也为undefined*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-null-空类型"><a href="#5-null-空类型" class="headerlink" title="5. null  空类型"></a>5. null  空类型</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*null表示的数据类型确定为objectnull用来主动释放对象注意: var x;console.log(typeof x);// object*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-object-对象类型-引用数据类型"><a href="#6-object-对象类型-引用数据类型" class="headerlink" title="6. object  对象类型(引用数据类型)"></a>6. object  对象类型(引用数据类型)</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*大括号包含的一组值对象由键值对构成,多个键值对之间用逗号隔开,最后一个键值对后面不加逗号键值对是由键名和键值组成,键值和键名之间用冒号隔开eg:var obj = {    name: 'Tom',    age: 11,    sex: '男'};*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*比较两个值的大小,返回一个布尔值(true false)>  &lt;  >=  &lt;=  !=  !==  ==  =====: 等于,只判断数值===: 全等,绝对等于,即判断数据类型又判断数值!=: 不等于,==取反!==: 不全等,===取反注意:undefined == null;// true 都没有值undefined === null;// false undefined的数据类型为undefined,null的数据类型为objectNaN == NaN;// false NaN === NaN;// falseNaN != NaN;// trueNaN !== NaN;// true*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*连接多个表达式,返回一个布尔值(false true)&amp;&amp;: 逻辑与 并且 所有的表达式都为true,结果才为true,只要有一个表达式为false,结果就是false||: 逻辑或 或者 所有的表达式都为false,结果才为false,只要有一个表达式为true,结果就是true!:  逻辑非 取反 表达式结果为false,取反就是true;表达式结果为true,取反就是false注意: 逻辑与的优先级大于逻辑或*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*=: 等号右边的值赋值给等号左边 x=5;+=: x+=y 相当于 x=x+y;-=: x-=y 相当于 x=x-y;*=: x*=y 相当于 x=x*y;/=: x/=y 相当于 x=x/y;%=: x%=y 相当于 x=x%y;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*注意运算符的优先级+  - *  /  %(取余 模)  ++(自增)  --(自减)%: 取余,做除法,要余数   应用: 判断奇偶数 倍数 ++: 自增,相当于给自己加1 x++ 相当于 x=x+1--: 自减,相当于给自己减1 x-- 相当于 x=x-1前后++ -- 都是对自己加或减1 eg: var x=10;console.log(x++);//10console.log(++x);//11加运算遇到字符串,直接进行字符串的拼接,返回string类型- * / %遇到字符串,都转换成number类型进行计算,如果不能转换为数字,返回NaN,数据类型为numbertrue转换为1 false转换为0*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*if(条件){    满足条件执行的语句}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双分支结构"><a href="#双分支结构" class="headerlink" title="双分支结构"></a>双分支结构</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*if(条件){    满足条件执行的语句}else{    不满足条件执行的语句}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多分支结构"><a href="#多分支结构" class="headerlink" title="多分支结构"></a>多分支结构</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*if(条件){    满足当前条件执行的语句}else if(条件){    满足当前条件执行的语句}else if(条件){    满足当前条件执行的语句}else{    以上条件都不满足,执行的语句}注意: 1. 最后的else可以省略2. 多选一执行,条件一旦满足,就不向下执行 (多分支结构条件判断为顺序执行)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态输入框"><a href="#动态输入框" class="headerlink" title="动态输入框"></a>动态输入框</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 语法prompt("提示", 默认值);2. 注意1) 默认值可以省略2) 返回string类型*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*string类型转换为number类型(强制转换)parseInt(): 转换为整数,只取整数部分,不会四舍五入parseFloat(): 转换为小数,只能识别一个小数点string类型转换为number类型(隐式转换)- * / %*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环结构-break-continue"><a href="#循环结构-break-continue" class="headerlink" title="循环结构 break/continue"></a>循环结构 break/continue</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 语法for(循环变量; 循环条件; 执行规律){    循环语句}2. 执行过程1) 判断循环变量是否满足循环条件,不满足直接跳出循环2) 满足,进入循环,执行循环语句3) 执行循环规律,判断循环变量是否满足循环条件,不满足直接跳出循环 ...循环结构关键字break: 退出整个循环continue: 退出本次循环,继续下一轮循环*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 定义引号包含的任意内容引号:单双引号都可以2. 字符串可以相互嵌套单引号嵌套双引号双引号嵌套单引号3. 转义字符 \(反斜杠)加在产生歧义内容的前面eg: var str = 'Hello \'world\'';4. 一个字符串需要写在同一行,换行显示会报错解决:1) 使用加号(+) 对字符串进行拼接2) 使用转义字符(\)对字符串后的空格进行转义5. 字符串的属性1) 字符串的长度string.length注意: 汉字 数字 英文 标点符号等都算一个长度eg:var str = 'hello';var len = str.length;// 56. 字符串的方法1) charAt(index) 返回下标索引所对应的字符 最后一个下标 str.length-1注意: index的索引从0开始2) charCodeAt(index) 返回下标索引所对应的字符的Unicode编码注意: index的索引从0开始0: 48a: 97A: 653) concat(str1, str2, ...) 拼接字符串4) 截取字符串索引都是从0开始不改变原字符串 当只有一个参数,表示从开始位置截取到最后截取时含头不含尾 包含开始位置,不包含结束位置① str.subString(startIndex, endIndex);当开始位置下标大于结束位置下标时,自动调换② str.subStr(startIndex, length) length为截取长度③ str.slice(sstartIndex, endIndex)当开始位置下标大于结束位置下标时,返回空字符串5) 查找字符串如果查找不到,返回-1下标索引都是从0开始① str.indexOf(searchStr, index)从前往后查找,返回第一个符合条件的下标index: 表示开始查找的位置,默认从0开始② str.lastIndexOf(searchStr, index)从后往前查找,返回后面第一个符合条件的下标index: 表示开始查找的位置,默认从最后一个开始6) trim() 去掉字符串两端多余的空格str.trim()7) 英文字母大小写转换转换为大写str.toUpperCase()转换为小写str.toLowerCase()8) 查找字符串 多配合正则使用① str.search(searchStr) 返回具体索引默认返回第一个符合条件的下标如果查找不到,返回-1② str.match(searchStr)默认返回第一个符合条件的具体字符数组(数组中包含查找的字符 第一个符合条件的索引下标 原字符串)如果查找不到,返回null9) replace() 替换字符串str.replace(旧字符串, 新字符串)默认情况下替换符合条件的第一个不改变原字符串10) split() 分割字符串,返回数组str.split(分隔符)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 定义中括号包含的有序的数据集合数组是按照一定顺序排列的一组值按照下标的顺序排列,从0开始2. 作用 存储数据的容器3. 数组里的数据称为数组元素数组元素可以是任何数据类型4. 数组的本质是对象数组是对象的一种本质表现形式5. 数组的创建1) 字面量法var arr = [];var arr = [数组元素1, 数组元素2, ...];2) new方法var arr = new Array();var arr = new Array(数组元素1, 数组元素2, ...);区别:当只有一条数据,且数据类型为number字面量法表示下标为0,长度为1,数组元素为此数字new方法表示长度为此数字,数组元素为empty 6. 数组的空位两个逗号之间没有值,称为数组的空位最后一个数组元素后面加逗号不会产生空位,建议不写7. 数组的长度arr.length数组的长度可以赋值 arr.length = 4;赋值 > 原长度 多余的数组元素空位补全赋值 &lt; 原长度 多余的数组元素直接忽略8. 数组的调用arr[index]9. 数组的赋值arr[index] = 'XXX';10. 数组的遍历1) for循环for(var i=0; i&lt;arr.length; i++){    console.log(arr[i]);}2) 快速遍历for(var i in arr){    console.log(arr[i]);}11. 判断是否为数组Array.isArray(arr)返回值为布尔值 true false12. 数组的拼接arr1.concat(arr2, arr3, ...)不改原数组13. 查找数组元素 1) arr.indexOf(数组元素)从前往后查找,返回第一个符合条件的下标如果查找不到,返回-12) arr.lastIndexOf(数组元素)从后往前查找,返回后面第一个符合条件的下标如果查找不到,返回-114. 截取数组arr.slice(startIndex, endIndex)注意:截取时含头不含尾当只有一个参数时,表示从开始位置截取到最后当开始位置的下标大于结束位置的下标时,返回空数组15. 增加删除数组元素1) 尾部操作增加: arr.push(数字元素1, 数组元素2, ...)返回数组的长度删除: arr.pop() 没有参数,一次只能删除一个数组元素,返回删除的数组元素2) 头部操作增加: arr.unshift(数组元素1, 数组元素2, ...)返回数组的长度删除: arr.shift()没有参数,一次只能删除一个数组元素,返回删除的数组元素16. 增加删除数组元素  改变原数组arr.splice(startIndex, delCount, 数组元素1, 数组元素2, ...)返回删除的数组元素,当删除个数为0时,返回空数组当删除个数为0,新增数组元素时,增加到开始位置索引(startIndex)的前面17. 分隔数组/分割成字符串arr.join(分隔符)默认用逗号分隔 返回string类型18. 数组排序arr.sort()默认升序排列 排序要配合函数使用升序:arr.sort(function(a,b){    return a-b;});降序:arr.sort(function(a,b){    return b-a;});19. 数组翻转arr.reverse()20. 累加器arr.reduce(function(total, currentValue, [currentIndex], [arr]){...}, [initialValue])total: 初始值,或计算结束后的返回值 必须参数currentValue: 当前数组元素 从索引0开始 一直循环到最后一个数组元素 必须参数currentIndex: 当前数组元素对应的数组索引 可选参数arr: 当前数组元素所在数组对象 可选参数initialValue: 传递给函数的初始值 可选参数注意: reduce()方法对于空数组不会执行回调函数*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 定义对象是大括号包含的无序的数组集合对象由键值对构成,多个键值对之间用逗号隔开,最后一个键值对后面不能加逗号键值对由键名和键值构成,键名和键值之间用冒号隔开键名: 键值  {key: value}2. 作用存储数据的容器可以存储多条,且无序3. 键名又称为对象的属性对象的属性默认为string类型,所以加不加引号都可以以下情况属性必须加引号:1) 数字开头2) 包含特殊的符号4. 键值键值就是属性所对应的具体的值键值可以是任何数据类型当键值是函数时,习惯把属性称为方法5. 创建对象1) 字面量法var obj = {    属性: 属性值,    属性1: 属性值1};6. 对象的读取1) 读取① 点运算符  obj.属性② []运算符  obj['属性']2) 写入① 点运算符  obj.属性 = 属性值② []运算符  obj['属性'] = 属性值点运算符和[]运算符的区别:能用点肯定能用[],能用[]不一定能用点以下情况必须用[]:1) 属性命名不规范2) 当属性为字符串变量时,obj[变量名] 不加引号7. 对象的遍历for(var i in obj){    console.log(obj[i]);}注意:i表示属性名[]里不加引号如果属性为字符串变量,不加引号如果属性为对象中真实存在的属性,加引号8. 判断对象是否包含某个属性"属性名" in obj返回布尔类型 true false9. 对象的引用对象赋值以后就绑定在一起,赋值给的是地址*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 定义函数是事件驱动或者被调用才执行的可重复使用的代码块2. 作用1) 提高代码的可重用性2) 提高代码的可维护性3) 控制执行事件3. 特点1) 拥有某种特定功能2) 可被重复使用3) 闭合的代码块4. 创建函数1) function命令法function 函数名(参数1, ...){函数体}2) 函数表达式法var 变量名 = function(参数, ...){函数体}5. 函数的调用函数名(); 变量名();6. 函数参数1) 形式参数 简称形参形参是定义函数时写在小括号内的参数不用var 声明多个形参用逗号隔开2) 实际参数 简称实参实参是调用函数时写在小括号内的参数多个实参用逗号隔开3) 当形参个数 > 实参个数  多余的形参为undefined (相当于声明变量没有赋值)当实参个数 > 形参个数  多余的实参直接忽略掉7. 函数的返回值return ...;8. 函数声明提升 1) function命令法可以在声明之间调用函数2) 函数表达式法不可以在声明之间调用函数9. 函数作用域1) 含义: 作用域是指变量存在的范围2) 分类① 全局作用域  全局变量全局变量在任何位置都可以使用② 函数作用域  局部变量: 形参/在函数内部且直接用var声明的变量局部变量只能在函数作用域中使用,在函数作用域外面失效当局部和全局都有相同变量时,局部先使用自己的变量,自己没有变量时再使用全局变量*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文档对象模型-DOM"><a href="#文档对象模型-DOM" class="headerlink" title="文档对象模型 DOM"></a>文档对象模型 DOM</h1><h2 id="DOM介绍"><a href="#DOM介绍" class="headerlink" title="DOM介绍"></a>DOM介绍</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. DOM: document object model2. 作用: 规定了一套管理HTML文档的机制3. 节点(node): DOM中规定HTML中的一切都称为节点1) 整个文档称为文档节点2) 所有元素称为元素节点 (element node)3) 所有文本称为文本节点 (text node)4) 所有属性称为属性节点 (attribute node)5) 所有注释称为注释节点所有节点之间都有联系: 父节点 子节点 兄弟节点注意: 属性和元素是兄弟节点4. document节点document节点又可以称为document对象document节点为HTML文档的根节点只要浏览器一加载,会自动生成document节点5. document常用的属性1) 文档的标题document.title2) 文档的本地路径document.location.href*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选中页面元素"><a href="#选中页面元素" class="headerlink" title="选中页面元素"></a>选中页面元素</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 通过ID选择document.getElementById('idName')2. 通过标签名选择document.getElementsByTagName("标签名") 返回数组类型3. 通过className选择document.getElementsByClassName('className') 返回数组类型4. 通过css选择器选中页面元素1) document.querySelector() 获取符合条件的第一个元素2) document.querySelectorAll() 获取符合条件的所有元素 返回数组类型*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建页面元素"><a href="#创建页面元素" class="headerlink" title="创建页面元素"></a>创建页面元素</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 创建元素document.createElement('元素名')2. 创建文本节点document.createTextNode('文本')3. 创建属性document.createAttribute('属性名')4. 属性赋值属性.value = '属性值'5. 设置属性节点元素.setAttributeNode(属性名)6. 作为子节点追加到页面父节点.appendChild(子节点)*/</span>eg<span class="token punctuation">:</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> divText <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'div内容...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>divText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> styleAttr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createAttribute</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>styleAttr<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'width: 200px;height: 200px;background-color: red;'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">setAttributeNode</span><span class="token punctuation">(</span>styleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="操作页面属性"><a href="#操作页面属性" class="headerlink" title="操作页面属性"></a>操作页面属性</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 获取元素的属性ele.getAttribute('属性名')返回值: 如果有则返回属性值 如果没有则返回null2. 设置元素的属性ele.setAttribute('属性名','属性值')3. 删除元素的属性ele.removeAttribute('属性名')*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="操作style属性"><a href="#操作style属性" class="headerlink" title="操作style属性"></a>操作style属性</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. ele.style.css属性 = '属性值';注意:1) 当css属性用横杠连接,需要去掉横杠,换成驼峰命名法 eg: background-color ==> backgroundColor2) 当属性为js关键字时,需要在属性前面加css(也是驼峰命名法) eg: float ==> cssFloat3) css的属性值为string类型,单位不可省略2. ele.style.cssText = '属性名:属性值;属性名:属性值';*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="操作className"><a href="#操作className" class="headerlink" title="操作className"></a>操作className</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*var box = document.querySelector('#box');box.className = 'box';*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. 作用可以使页面具有交互性2. 事件一般配合函数使用3. 事件的语法1) 写在HTML中&lt;标签名 on事件名='js代码'>&lt;/标签>2)HTML和js中HTML:  &lt;标签名 on事件名='调用函数'>&lt;/标签>JavaScript:     定义函数 3)js中ele.on事件名 = function(){...}4. 事件  鼠标按下 ==> 鼠标松开 ==> 鼠标点击1) 鼠标点击事件 onclick2) 鼠标移入事件 onmouseenter3) 鼠标移出事件 onmouseleave4) 鼠标移入事件 onmouseover5) 鼠标移出事件 onmouseout6) 鼠标按下事件 onmousedown7) 鼠标释放事件 onmouseup8) 鼠标移动事件 onmousemove注意: onmouseover和onmouseout支持冒泡 即子元素会继承父元素的这两个事件onmouseenter和onmouseleave不支持冒泡*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改页面文本内容"><a href="#修改页面文本内容" class="headerlink" title="修改页面文本内容"></a>修改页面文本内容</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*修改页面文本内容ele.innerHTML = '内容';*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
